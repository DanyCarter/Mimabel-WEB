{"_id":"@tailwindcss/forms","_rev":"69-6e068e4e9221e467bc55f6471ae1598d","name":"@tailwindcss/forms","dist-tags":{"latest":"0.5.7","internal":"0.2.0-8a8671b","next":"0.4.0-alpha.2","insiders":"0.0.0-insiders.c9d9da3"},"versions":{"0.1.0":{"name":"@tailwindcss/forms","version":"0.1.0","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"prepublishOnly":"node scripts/build.js"},"devDependencies":{"autoprefixer":"^9.6.1","clean-css":"^4.2.1","postcss":"^7.0.17","tailwindcss":"^2.0.0-alpha.14"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"9ac4ac3c94a5a45b1eea84efbc7ffd17af30593e","description":"A plugin that provides basic default form styles that are easy to override with utilities. Hopefully the successor to `@tailwindcss/custom-forms`.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.1.0","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-THildqHsFwzboIBH8lysMfeOVPgU9MU2N8HJpGSg9RsenYv1jIDApeEdJJNZamNohoujdUebVaetCMgKdzx2zg==","shasum":"e938b5a8923f45f591337bacfa823daaf50b4237","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.1.0.tgz","fileCount":7,"unpackedSize":24333,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfrGX6CRA9TVsSAnZWagAAlF8QAJDfSg2XffsBgQGcJhRu\nbQoSt0iu0U+/sSlGluGtJZ3lc0JH4VkHUBPluLHf+q81Sv8F7M5drTaA7NG2\nDNpqENE/uvPlI8JEdxR2gkipEuzF6gVl/FfbOxmHc091z9LO3Ud0UNZSVbHy\nv9EiYkmOJ8vNFXahVha54d/4hvc2wyTuYYbOy0gWUqLZECJUfBDNGT2ekVST\ntkN4fRtxZpXhQhTRNQIl23YK47TPx/7FwtivXC8UEuTLtujytmkBqKJRXIKp\nBX998AzTkgd0EouhQCBRqXwqDRRPeKA8iEPCEaXCTEJI43QaT91k95tm/fbM\nP7x6SnQOgIS+Tgfiz/pE8LnHnVOYKDb/vw4EVi9BS5CXAISm3+x5TgiKScsF\nY4eiul1d5EUWpvlsyn+h+l0HUVkKqmNj37eqmN9ZjxoVpX190o8tfbjcSyX3\n0QH2UmF0iyrowUNIR0YCIaLqSlpAB93MmOG4t8/mjcHWhD8TG6H1ne7fuVzX\nV8klzouKkC9gMCV+Q6E4hHY+I21DsNktRWVKrVV+KCpvSQG6irRY6Tv78FvM\nx9dF/bOPhjcy6G5viY+kcKHUu1pot8HNIs4b+mwzhDUFBjQgn4ScjNK5R89s\nia3jd3YIiZ64cIsj1pCSd0AEtFL2OxEVLOOsmMPAstJHMQGwBVsMTG2QOeJX\nA+NH\r\n=dtZ+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCPQtCAPaJA6x19bFM/h8N6EvN6qxmOQL+jw3qdrQSBowIgIR99/TSm/ShbWJmDsqD6yAUnoGNsvKTBWR/WeuXkWeE="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"malfaitrobin","email":"malfait.robin@gmail.com"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"adamwathan","email":"adam@adamwathan.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.1.0_1605133817639_0.9262431634249371"},"_hasShrinkwrap":false},"0.1.1":{"name":"@tailwindcss/forms","version":"0.1.1","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"prepublishOnly":"node scripts/build.js"},"devDependencies":{"autoprefixer":"^9.6.1","clean-css":"^4.2.1","postcss":"^7.0.17"},"dependencies":{"tailwindcss":"^2.0.0-alpha.15","mini-svg-data-uri":"^1.2.3"},"gitHead":"b836d4e1098b609d8ee1adfdd2b7a5f92875f3c5","description":"A plugin that provides basic default form styles that are easy to override with utilities. Hopefully the successor to `@tailwindcss/custom-forms`.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.1.1","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-vzsYjKrAFtILK5zUMPEfOiL0OrXXnGf/hdY0valjrRyhEAUi2mS0zx16VqaXWVjmtCN/WrK6nD2HZrVvHzyXeQ==","shasum":"6a79b287f6cea2f9ea4fa777315c05286be0cacb","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.1.1.tgz","fileCount":7,"unpackedSize":25760,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfrKkRCRA9TVsSAnZWagAA7nIP/AtLsGlKTRhtckH86ikk\nFAxSNvitYmBY4hI/cXWL5qvnQ+F19yIx7Vuilchr+4oFGRJel4FSaH19a7f+\nYtiZqscbXp0yLumCdMtf0h00WdG8EWHgN+5EklyWCadD1AFbzhiwv+pfLQaV\nvpQz3RzzXnKBOkGSrn2QqQb6pVQ0Ek7JVfe4qM24g+4f2lPNN4Ln9Ulms9bs\nCi7ecMk4jhhHPd8xw1TCSTLtKwx0Lkuf3+P2Z73z1ii2qn9dw6YFTT8ZZhr5\nI/Tjoz0+JNOC1Im1PR523FlL9wWrQDjidnPtVclmREDgQIBtLrzwsdYdRr8X\nBJo35u2KA3QytuesakSWonGJCYT59M4tdpenVjFd+5zVlA0ExlX31d/PNJhq\nqkqpbuj2DV2IT30C4E+BUtK8B9mLp99RPW5N7x9x20yqJe6Jk4qOTlzSYwhA\nUeqFM5+gPfXeej7eSQAAMeEasK5LrDtjym3xUYvfRz0c+LGR08NCrsii+mlA\nmJPmC8s4I6orF7F1S40KvbXrOVR2aBgtIGAZ6uSLyKd+ByGGi0MZdSDQWJl1\nVnOX1DnpfTxti/2I3Lt9a2Qrylwnzp8UV4U8MotHz8x6RyuwDRsWI9QICWQ9\nqAuxbbQ3kOp9dJVzJ3D41ItsunBTVA+FvWqeZKNK055naeRBCuMcUkk1D9wG\nMxXN\r\n=7GDk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDS3IxnUnyq+/9LH/3+TSshgFXGNet2hDBnhC0ROr6E5wIgIU5i76Eg4w36wvu3YLEgeFuvIMhe9aqrEkdqfm3bAlA="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"malfaitrobin","email":"malfait.robin@gmail.com"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"adamwathan","email":"adam@adamwathan.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.1.1_1605150993270_0.25537508290709"},"_hasShrinkwrap":false},"0.1.2":{"name":"@tailwindcss/forms","version":"0.1.2","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"prepublishOnly":"node scripts/build.js"},"devDependencies":{"autoprefixer":"^9.6.1","clean-css":"^4.2.1","postcss":"^7.0.17"},"dependencies":{"tailwindcss":"^2.0.0-alpha.15","mini-svg-data-uri":"^1.2.3"},"gitHead":"98f67dd4c0726dc44f0925344dbc27e68108f053","description":"A plugin that provides basic default form styles that are easy to override with utilities. Hopefully the successor to `@tailwindcss/custom-forms`.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.1.2","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-GgUjTVuUPc+7IVpdKT1/WS0BclMXWWe1uEakuxizoAwCZiNRAGy2de5bjlI6Lo4gewHQEx5SBbHT0DR06JY1lw==","shasum":"e1e66d17b92eb06fcad2dce4fe5f26e05de5f2ff","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.1.2.tgz","fileCount":7,"unpackedSize":27596,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfrLMvCRA9TVsSAnZWagAAPCMP/iEIk+3AQYUAbGrNpze7\nYVpJ4rMFeWUMgvTZtNhu8fXFVlwamfPF97f7M3fixdqsfpCUwwTibVRsleU/\nMwlbCtEGF48kc69rzR1HiDpMcU4k6u8CyU1HW6TNHEiq889z7dox2sqd5ptA\nbMG8MTKYtR0jH8MnmfN1k1qozfKPEnyI4dy06qQffi64FE4yyvkkXm1EoKtq\nTXxO7QDYuwPR0Lq2K1Vq+Kb0uoY4B36HSE4v3zOgcncHIx6NCWOF+9oOtl76\nTnl9xrQJ8wjChihv/6/RI7NRb3SPR75gs/l0iwx5Cu9aOH9PUPhmwGSclhCt\nlni3DnVK6gejm5KiG65oWNGhgEKna5LeBHuVXw8Capgri2rMkqyhSIrontoT\nMQDqsbq/AYH+x7Pk7Dbtl9AYVBmkiHtYWAa2p4hSw1Ek5nO3qyzNoRUdHHq3\nRHk1WcBIs8xyMZb/IMq1L8vzTtnYfIXE7wV2QZ4YQhbo7Zm4zGg/jpEdzg+F\nt3N0LPkKvIrY08lzVlv1B4waRA2nTaeA9Q6kpyk5QQg8MIb/sl8AFo2/f1p0\n8//M7U+STc6vHUM50rnpsKRIo7bt95UTclvAOs0CNYQ2xPtyCmG3s13J/EwP\nrfWmtyi7baSFM0ZaZWCXyaOFVo4KTWRuHHBZopJcm8oc2D0+lG0nyuTF8eI+\naijT\r\n=2X3g\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEnvvYSOiCrISxM6dsvLCtW6ShX/ftaegnPYeowxrfWTAiAGFhXpGYuLLm+gLq1q+ICGvgBC9Hsg0Lg9sBt/8r8ZNA=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"malfaitrobin","email":"malfait.robin@gmail.com"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"adamwathan","email":"adam@adamwathan.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.1.2_1605153582601_0.0964839120752683"},"_hasShrinkwrap":false},"0.1.3":{"name":"@tailwindcss/forms","version":"0.1.3","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"prepublishOnly":"node scripts/build.js"},"devDependencies":{"autoprefixer":"^9.6.1","clean-css":"^4.2.1","postcss":"^7.0.17"},"dependencies":{"mini-svg-data-uri":"^1.2.3","tailwindcss":"^2.0.0-alpha.16"},"gitHead":"686f8508355910243ada748dd4217a4120f37c6d","description":"A plugin that provides basic default form styles that are easy to override with utilities. Hopefully the successor to `@tailwindcss/custom-forms`.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.1.3","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-b4+qCcMANYzt+tg2uQAi6kjH4QMVuR9wpUwZzlJDWiMgpGHYIo2sKN+2aYPH2hjjXfJSuHPU3fMIqOpxdPqdVg==","shasum":"ef10739e4927457a73076bd59734d8c524fc9d69","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.1.3.tgz","fileCount":7,"unpackedSize":28685,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfrUBfCRA9TVsSAnZWagAAXp4P/joUInRtI8YYYr92hd73\nVWWhF47vxtzZWkp9Exarewl3bFJpqhevvmItmYlJjpZjoYEfBDOnTGfJRlo1\nK7A4nuGP4XLg5Vn0fL/YJLCROTr1/pTUCurZKF+CZc+Xunz0JZvcjeOPWN//\nFuX9gWTx3gYAc2eYztdULFwpFgKYchuHSSipiVm8BEr0RxtaH98lOhb99MO8\nKI5QU9sUbCs3AGGnSS8pQM0YsV/QTH+oy/YHdz/pFBwAWw/OgKt6mthAxGzG\nwSOWviyOTWGPv6TcuK7BxUUuYJZO7QZJjtB2pJ0Xwp0r2kcc43yFF7rxsbmO\nllyh97xdlCViI+i8+CbmOjOLffiZ1rNsaAonwBHTonJFd21EjjOPUwBiSBv7\nChCJy40jq2UfHzfpV/NXkNx2bhqDnSpmfA/KGMUsYqrgtG7v71GMY1xkmWdf\ny+PKndkpIQaPz3yvC/ep+PWvlzRXV0nvmdfRsnnbBBcp/D7AknTtM6LT+/Nm\nE1dG5WHbkZXATtFcp/IqCKMcTS+MA6Hvelvl2HCSMWlGJuzxr0qamNDHAGlq\ndpClAy6Km5nki3ibEpofTwvSHx27Qpz+kdPoiKZnmr29MScBmdSp+0eIGRr2\nxhMmq43YjgU7NBSZE9ceV4d8fUVLWiZDqSqbzj1tb70V9kj3EoESafT1Tj35\nJJrc\r\n=Dg+8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDp5FYH0M+4qVs2f3BO/YsrMpHsMKRf2JEboSIvg20ivAIhAMS4jhmRqtj+HZtdNCsJafJNjSryI9L2+u88mbqnE9XL"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"malfaitrobin","email":"malfait.robin@gmail.com"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"adamwathan","email":"adam@adamwathan.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.1.3_1605189727043_0.4173896493145022"},"_hasShrinkwrap":false},"0.1.4":{"name":"@tailwindcss/forms","version":"0.1.4","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"prepublishOnly":"node scripts/build.js"},"devDependencies":{"autoprefixer":"^9.6.1","clean-css":"^4.2.1","postcss":"^7.0.17"},"dependencies":{"mini-svg-data-uri":"^1.2.3","tailwindcss":"^2.0.0-alpha.16"},"gitHead":"ce614302e01b9d175e571f6b04cff8a6077528c3","description":"A plugin that provides basic default form styles that are easy to override with utilities. Hopefully the successor to `@tailwindcss/custom-forms`.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.1.4","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-yIOBwOwQiI4vW8F0y3GkSoAEzFkmEV2oVtZT4c8DD6HNWY74LQV1wyzHxK0PRb9np01nLX7vtomsPNUUfJ3WTw==","shasum":"b0e01980054bb86f35bb20706baabe85e45dd0df","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.1.4.tgz","fileCount":7,"unpackedSize":28686,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfrW8HCRA9TVsSAnZWagAAKYgP/3uP9+57Fei+GnDW2nsb\nsUNikjEs5aJ5fcM7zr9j2n6kD100wSmF8zmyL6hVUA0qiAOSVSSie8iwwLGc\n4SjvnKdK2fr7mHAOwS26w2YFj0k9M18pWh+P7ngoLGCVKvZqAz416TyfhzEN\nzg5WiKBbiOyyl5siVUIxOmfM3NAEUL30gfru0kjOQrp7f679UJU7sbXA2bh8\ny499pOQ/KnR9klkymwGVVeQ4eKtuC9MdmdFaWqGc3mdbDe3AGYoJaMQ/IOkS\n8AWWj/dElNX+F6rRLaXaEnvtKDnEUhehIQuEmR7dJm4Rz2j1CNiWOwC2pIYZ\nlkVVaXM21pG7+bi9he7fYWa7MDS9IF66V27nahpJfm9r5aoKAbECKH9ZhLOX\njlbbyJPNpj3QiHA75UrDZ8vMWxSyVbApslC6kH2Fdl1H2fiCXhscO1auI7uo\nZPRhnvltsAfzo5zgk0BciSnZPjTCe5kD47h/JHITlPcuZXe5FWjONWNjxaWb\ngTHsGWAXjf6BB8GxY2LPvp543FORZXixsZn5d1Vp4qROUBBhcCcgw77zhR+z\nWVncemmYhujRuUj/AJ9XqYRH+TCuFk+E6e4ik5nVi8fsXxPa+6U+WhAZimJc\nHkdxdZD0cxAzOFxZrLaZriKG487YX+HzArB2x1I57Z7iuu/F3DHMrSvECk2z\nGw6w\r\n=lBN9\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC35fPqQjQgYX53dus54qaOsv9K9P4TIUUeI6o5XVazygIhANEWWQjb1sdvowZsqsAWduOrh/5z1rnBM9brJOYuo+7J"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"malfaitrobin","email":"malfait.robin@gmail.com"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"adamwathan","email":"adam@adamwathan.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.1.4_1605201671189_0.6853584591323869"},"_hasShrinkwrap":false},"0.2.0":{"name":"@tailwindcss/forms","version":"0.2.0","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"prepublishOnly":"node scripts/build.js"},"devDependencies":{"autoprefixer":"^10.0.2","clean-css":"^4.2.1","postcss":"^8.1.7","tailwindcss":"^2.0.0-alpha.23"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"8bcaf1abaaa4dda55b2e89b3cf805e74db458154","description":"A plugin that provides basic default form styles that are easy to override with utilities. Hopefully the successor to `@tailwindcss/custom-forms`.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.2.0","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-YAAvBFuKhFt5u7JWU4TNt6wxqKI0E1k19hxgIjE5NEs5EXjiM1sNKnSWOT75Wu2CzOcp1qtMMoJbo7DsIzV9jw==","shasum":"75e4ac17b915e7c148b61ddafb99c68d8aca1b69","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.2.0.tgz","fileCount":8,"unpackedSize":31186,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfstTVCRA9TVsSAnZWagAAAtgP/jD2YcfboXpyy7zvY7zN\nf763ta5bFOElnO4KqandSNgK5R7lQvMkVjrtEm+Hm5i2GaD6wQiKCb8QujiS\njixIU7iUo5VSn4kGGJ13ViqLdSphzGrqE06aYQ2ens77XBhgyy+iOfSLH9F6\nM2Q24Ph7Nr3AO3b0Q2wmUIlY8HEVpMcUeGkLPEggogyYoJsqpwhYTJlhiYhu\nJdO/mNItkYRbGc+JKdGFSomiV6isGJiFTWPeTJRciQT6ZmzPfeICUBefNe7M\nBcd00QEFDIV/OQdGSjofsoSnLNHVL3davZqOPqf194Ea45qqLETUp7lYVk2a\nK5C8iRk3dkthHjV/znPAXoR75qjffFiUeuzrD9GFZ5EO2MXHc4uhCIk8sHjc\nou7oHhvuGzIAH07gen3nmsOKHumFQ3qjvj+SRfWHnx6bLb35rstbllE0wVnR\nO3iYk1OPkAlAdFbQq2ovRaazTL4Q0+ZEB6JaBREil5WzpXYorUAHlL1ER/tO\nMl5/iSAqXJBYGc/by9VuBeNcGc0c3AQzfVMeJwH/jA24qkp8kQQfu+uxN1dW\nMCFMryLCkCmgnHIXpb3lV/AeBJea0XehobVkRyW3o2bbkQcwgzjXvj3AjWdH\nbY2wv8H4c8GJRQrqGCc+voNzHm3Sb2wMYmeO5wBmAdv3zpE2BDUp79wAP6UT\nMg+E\r\n=3buI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDl/I6z52Ij9PK+YBEzOcdgoUVK9bdfRDEO5OAZCnypjAiEA3v8K/sUibyTDjZREIfJjq/WpltNteTedpvd6KXOTQKI="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"malfaitrobin","email":"malfait.robin@gmail.com"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"adamwathan","email":"adam@adamwathan.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.2.0_1605555412853_0.035780571326962995"},"_hasShrinkwrap":false},"0.2.1":{"name":"@tailwindcss/forms","version":"0.2.1","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"chokidar \"./src/**/*.js\" -c \"npm run build\"","build":"node scripts/build.js","prepublishOnly":"npm run build"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"^2.0.0-alpha.25"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"eb1d7cde242682acb71e2b7741279c8f6d11955a","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.2.1","_nodeVersion":"14.7.0","_npmVersion":"7.0.11","dist":{"integrity":"sha512-czfvEdY+J2Ogfd6RUSr/ZSUmDxTujr34M++YLnp2cCPC3oJ4kFvFMaRXA6cEXKw7F1hJuapdjXRjsXIEXGgORg==","shasum":"3244b185854fae1a7cbe8d2456314d8b2d98cf43","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.2.1.tgz","fileCount":9,"unpackedSize":42804,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfs9UzCRA9TVsSAnZWagAAtaYP/iUql0giaf/MIZDLZbVJ\nyduTfwUPnvkWXN1o+OL/k4sH6KvZt5mz9UWPnLcvdFGR5+ooOP6kQ8kUGWX/\n8mLXSek/zLiV8Q5OhH0hSBNK9xYpo2bdHJu8Y+X/4C/l51yDCniZ3P2yH5Vk\nb7Xth4TLK6n5//GEX+yxRS2rUlltB/i6sMpcFLgHTm/cwoaH6p6BkCcsR2RP\nO1pM2GImlApJSmkTg64iqMQLVFOT4KZwnYlx6ZIXdZgo36ZB/jNj5hg4Kx6Z\nRIbkY7l9chWMOj+KU72qYvQ2JMzh1lQT50pdIu9ZlH6oDmP0IW+cSLq6F2Az\nvCYR1xYVlYcCynPQNswD85T1H3i2Kmt24RnkhKxc9dUfRTq4fJ0szlyv4hQd\nxNqhwVHTPUmC/2KWl8UEai4y/YbmtilNvrzwPG+tqKiQ2e1ZPv/oHc3aWWP+\nM+eq7eLF0g4SvwgdQ4GSUNw1+WjFH9UFLZqKmSOb0/Ry8tJIqfasxuZH9BAD\nKiHcMmt/u8Dy3fC31ZHhOwejXfyCWoxNUIwgx6CUh1beO6Hs8n/bqW+6Q56o\n1qXczm1Fss0V4MWbB3yxZzO2M6Vga0fSUQUs3b1e48+N4xOR3V3tV/8/zCr3\nSknKqy3Vh54uFxoQmb5Ydl//HQ1mUbmE8FnU6BFlnwlrN9nvA0mk9VHOJGyw\ncbfe\r\n=ei2o\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC7dZpA98xs9eBbskLMi3LxT4enR16Ik0ZxL0RQdN1xoAIhAMMfJhExB2LWwndNUfAgsfFUG4SbVV1gLNOF/5rvjtLv"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"malfaitrobin","email":"malfait.robin@gmail.com"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"adamwathan","email":"adam@adamwathan.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.2.1_1605621043159_0.30740380907296583"},"_hasShrinkwrap":false},"0.2.0-8a8671b":{"name":"@tailwindcss/forms","version":"0.2.0-8a8671b","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"prepublishOnly":"node scripts/build.js"},"peerDependencies":{"tailwindcss":">=2.0.0"},"devDependencies":{"autoprefixer":"^10.0.2","clean-css":"^4.2.1","postcss":"^8.1.7","tailwindcss":"^2.0.3"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\n> Note that @tailwindcss/forms is designed for Tailwind CSS v2.0.\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n","readmeFilename":"README.md","gitHead":"8a8671b3ec62a7e71ca8477d50e80042ee40f0e6","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.2.0-8a8671b","_nodeVersion":"15.2.0","_npmVersion":"7.0.8","dist":{"integrity":"sha512-R34p/J+/up9oVrsT4dS6/DGtf3qwrGx3WhQ2UwqLc0Qg2EPAtyqxnSUnSEQmvvA8Lf2gReWALBQYYk41hQ0Dag==","shasum":"3bc1644f2ce4a87e0edcba23a78b5d1ecd199da9","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.2.0-8a8671b.tgz","fileCount":9,"unpackedSize":42349,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgOQ8ECRA9TVsSAnZWagAASNwQAJKjJWOgNEpVY+85c//H\nY5IaoHO0icVagkD9McxK96kJvd4aev/t7Du++l6bmXhC1xRFAXZjaZtQ67Cg\n6IaM063HGsykMJw7icFPxROs+w5Z0aCy1aB5L5dnB5WtTDcPKp0ALlbTqUHu\n3CjaR4vmADjkzoMrSx962ocjATLZ5pEQwdwWvhcWSV9iM8NET5buTc4En/4k\nFj4quB9On8Gb88gy+2O0fyMgO6iXgNeWA+zr/zW3amb9f6AE2Vq6y4RrrHxy\nbi9q+4ibPrgtTLNtopEKWvS9gSc8llVa9TeCeiOP3cfN/tEwXAZX45qPchNv\nqXtqKVaW1v+fCVIijqNaZ58YuVCwMe/1bnHr3RZ1cVJDNLpsIvuzSi0SHVcn\nlQOSAIPlCFuLCTbukT1xQ/AMhUBl9Elmo2YpSmobOX9YiTjQ95XvQ6OmIedQ\n11gtNz0RZJ4dQu/DEq/t8NjJ3iAviRY+l+eyqGoc87XTU+x6DNlwz1R2U32v\nCJONxRr+QJJsm9cXsqDHLJrspXuvUun7fKTlfn+o4TyMPjqHm1VT7lqiNeXV\nF956x7spyTlaRyT4rJpmFz0i1EPndK0YYI0O8r2ahJeD7SCw4xo6dG7Pzg1C\nwTxvwt0GzBf9FV3ggkRgipfh52FEsuk+58jEHke3adswJXmkCk11abFsF457\n7N3F\r\n=TviX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC0c5hpXqvNKDdRCVYkI574Bww8bRGa/ePaUgwtDwMtPAiBUB0X/7sCIBQr9fR5rvVDDhT6ocV3ROa3tTw0ZiPE2iA=="}]},"_npmUser":{"name":"malfaitrobin","email":"malfait.robin@gmail.com"},"directories":{},"maintainers":[{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.2.0-8a8671b_1614352132314_0.4699061553698223"},"_hasShrinkwrap":false},"0.3.0":{"name":"@tailwindcss/forms","version":"0.3.0","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"chokidar \"./src/**/*.js\" -c \"npm run build\"","build":"node scripts/build.js","prepublishOnly":"npm run build"},"peerDependencies":{"tailwindcss":">=2.0.0"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"^2.0.3"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"241613f3b948b85a3065673c26292525f552417f","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.3.0","_nodeVersion":"14.7.0","_npmVersion":"7.0.11","dist":{"integrity":"sha512-qobVmX9IVHSNVmsqLW4XS9ruw1Ql0Ha8mlNtNyfR3nt0AW91wjgKOt/pPCt9qqbv0q/uVu2KhKvvrZBf+nCwWg==","shasum":"d854dceeac69173b0003eff6950f272d338d0f93","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.3.0.tgz","fileCount":12,"unpackedSize":49676,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgXUPBCRA9TVsSAnZWagAAyAwP/3DcT7tGtsqvhYXyM5sZ\ni0o1lX9zCeCDXklB6XOD+hXBBhymsymdeF1lJoDBcFVUIpNHLgEcgBMVGmko\nK3wylk1lLQzW4KpuROSfvVnnu00gojdX/RbxOmWUQMVNB5WRfy51ndlrWcT6\ncQhUOR+ulyaVxUtwV8H/vgAvkzLhmtChjHmK30qVqTSFh8r3/0N6ikOav5Ad\nn6picn6TNuDWMd3YsY1gXZhfHK7Qz2PqE+EKrIEvT4VqjOqPJoeE/9QFm/Qg\n6sY+D8c1P4TOAbs/KECeTAwKpBNxrpaWdxXevYg54DUxGRGUyJQxAB50LfeJ\n0dZUaOaJZyvIe8SzQr/MvVWWkkzPahZtnn6bjdgRsOz2mXujUPUZG1uVBCUM\nQ24dhddZOHgxtj7ZlRkdOK6nf6N98my9S6jLfxxssxxzt4G7PGSs+nCoitg7\nGdg3n/Vp1DdG9IJrMSojyuCIBgJiVPvEG2X4Jz5cRGPH/F9VHmBnGvKuljUZ\nJu4nxr0McLgs2ZluQLtoUNWxhdLJfPsI/VeFRCqp1MDt1R5owyKh1LDFGkuQ\n55nLpjhy1e41lJyQnu/PxqmJiOFC3tyPBiFw5PlCrftWL/aFtBUw6K80WGb0\njy0EH3X1R08xCiKYZyqwbVxEjDdX+U+0Cnp6pRXHSAr7vcjUMSu6dOWFzsM8\nRr/X\r\n=1MTk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHiG+LK5ZAHkC6aBYEK+INqnfjCAbpN4L8BSjHh7iYx5AiBj4Wj0Edg+EUbwj5Se1DYVNi4VFh9q5noEyX8F5sisMA=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.3.0_1616724929568_0.6273046371358071"},"_hasShrinkwrap":false},"0.3.1":{"name":"@tailwindcss/forms","version":"0.3.1","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"chokidar \"./src/**/*.js\" -c \"npm run build\"","build":"node scripts/build.js","prepublishOnly":"npm run build"},"peerDependencies":{"tailwindcss":">=2.0.0"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"^2.0.3"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"48bd97060ae34b9549222b3a72291455f3e8a730","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.3.1","_nodeVersion":"14.7.0","_npmVersion":"7.0.11","dist":{"integrity":"sha512-eIymtMPcJ9VwIRAapsuVAQGlhy0UcZaTXrMu0jW9Bzlh8FD2WfV3Hnfq1ddAlgK7YE+ASaIB/wNtDEFasCso9Q==","shasum":"977c214e60a53f9399addc51bd01e2db97c2ec8e","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.3.1.tgz","fileCount":12,"unpackedSize":51399,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgXbiICRA9TVsSAnZWagAAB4oP/iDMKNZcJ/No9Fjvo9Fk\nSkMxpjKX+A6Sph9Yza9owbm7OJN+swRdnvMPdazLzUzzzBzEnoRiABXdsiIw\nWCg1pFlUJ/aPhXpLzCRHjHfDCjrFaUmL/KVVmrdENAyEs+r45n64K4Mieu8T\nzllznMKywh58Pr3vOq3vO40JQVrPFJ9TZijauscyjfo1tIK28VLE/UslLay9\n5ozEmG51E48dPG2bmsgVn3lUNf9h+42SPO5hKjvgU5oP7aiZKaJKVZx97IuR\nXbnhuuWLLTuW7HJTMQfQOM48IBWZKt3afUdqfp8QEQQI4pJw+Ol6wIuSknZQ\n9GJ0kVp8fdoRiIVvELLFlQiNWR2U3qxt9BQH3w1WDmUUVMgyFE21yqhJv3vq\n43JOw+NzeAE2s4mMOW7f5qNt+F81u8ldynF/3e5uHA2DRHJ+zHnD5yDQ8fwW\nltZxOnPTYHMV/EnnSw9o6ZNOseID87VwOejEgj0Xm7aR8OinH4ZaAVMfEp/j\n62ePF+liHpSwpC6Tks/WNYmCkTDminUMd+hOfBYy2b6P0j3nQFcLisO6gd4m\n9FtHGxzAePjQsEzB7TRjyVcQtYA0x83YkR54qr6zrYmm3CQdN8vM58ezOHJt\nxwLJBDli6mqU+UR08r097CSYKWVAq3dZSzoTBHCAGu+g5ZVidDa0Q2uoLbyL\nNpEr\r\n=yvT3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCWZrYZDy/S+9rLEnIIEKcOdUN++FCyQ0bZatvoYnKR2gIhALuVndAkC2/SXpHaiF2jDO4o3/+V0Z3fDFGmYDXqZFHd"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.3.1_1616754824226_0.33977478200736444"},"_hasShrinkwrap":false},"0.3.2":{"name":"@tailwindcss/forms","version":"0.3.2","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"chokidar \"./src/**/*.js\" -c \"npm run build\"","build":"node scripts/build.js","prepublishOnly":"npm run build"},"peerDependencies":{"tailwindcss":">=2.0.0"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"^2.0.3"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"46ddc8005646e0dfd6588c7a3861fd8a16f16780","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.3.2","_nodeVersion":"14.7.0","_npmVersion":"7.0.11","dist":{"integrity":"sha512-aj2/rJsGb2whAZ/BQWHWWQRSbhH0r/l1ozOByiv+ZNjBD84GMvb5dhAyfpeasFky+EJrAwX5eaqft8NQMZFWvA==","shasum":"e28c4514a53e69f725416a5a2a6d0f221683f069","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.3.2.tgz","fileCount":12,"unpackedSize":51719,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgXbnBCRA9TVsSAnZWagAAeDEP/3LJ55JzrWdxi/Vg+433\nfvx6+JlkDfNHnQ1yQ5GZtZt/0UGK18EDdcO/lf5rHnVa7TOt0U8kcGwV2Y5R\n2josGNtNU1kL4MkWgzsRTNUdftx5dMSqPTh5xy5UoWZr1D4ipkPD0g/RQ6i5\nTIvPdAneyaoqySfPYrG52YOlme9H3XJ8+f01ZjHmNkZcfeu/4QBc3wMvV7+X\ncUFqeE1b2hq7m1FNjKBBTdkRi+XFf6gLkaIfzI2JEWEhzkh1nY7dAKDAHE3e\nCjgTRqEoMi0mIMLnmTFsYPi2nuBsF9G+lxVu9xArhe8eo4Pa3+TYCnw9g5gk\nzHG8qL6qRjB1i5YVcg4VNjqtEInc9d1pwClgnk/MSM+mrEj5s1lbyBgEF+y1\nA6BieSCtjUlJaTTXZVRsc354urGtkvtEfR2o8UliULDlSjjepunVT53f7f8U\nqc2soM0tlHHbrgISUZX/egp7z/6VUhlzy2FwLC6C0wiIPpa7I0lH8/nMdwPJ\nsgdwy+oOgAX1MKqPb3T+D00wIFis3OV/86DBKvcVKox4NAuNYKM27IpKpf74\nStNkEwzcE3RSljIkIzCKwVO96HRBG7UBKi3JuhSFumaxdQ/sjXUML0EKpd3l\n7sgEZXzkBw461iOxSz1antdBq/CgVhmya2vb1/vYAdY//XM8tQiNO7l1J+bS\nH1FW\r\n=eEIu\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDOCc94cf3AekGftiiZuH143sAHZllstB2GmAuQ25iNrwIhAPN7rk2S1kACAVeZ2N+m84sUIuqoWSizDbA1H55Rz7QP"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.3.2_1616755136570_0.40012165167698144"},"_hasShrinkwrap":false},"0.3.3":{"name":"@tailwindcss/forms","version":"0.3.3","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"chokidar \"./src/**/*.js\" -c \"npm run build\"","build":"node scripts/build.js","prepublishOnly":"npm run build"},"peerDependencies":{"tailwindcss":">=2.0.0"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"^2.0.3"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"6f951b232c23ef8766a56d624a312ce6d72f6c53","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.3.3","_nodeVersion":"15.14.0","_npmVersion":"7.7.6","dist":{"integrity":"sha512-U8Fi/gq4mSuaLyLtFISwuDYzPB73YzgozjxOIHsK6NXgg/IWD1FLaHbFlWmurAMyy98O+ao74ksdQefsquBV1Q==","shasum":"a29d22668804f3dae293dcadbef1aa6315c45b64","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.3.3.tgz","fileCount":12,"unpackedSize":52089,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJguQinCRA9TVsSAnZWagAAUnsP/2tHu/sqCoVv/PiYfPwN\nKiyTIE/isTdNlQEbg+ZFtOoyPuO5pBU4mdOJDOh1Vmb9uk5NVf2K3A2D3vZq\nXkHzrXLaYjihAos+Tqd9C7PbQxWac2543TtlIwEuV/TFlXccdc7JsoTzNXPP\neo1YIIEzt5+va2J5HtMg17IfC7SzzVdf7H4YnWCfqTHtfBoeBuR1zGqlLCom\nGoUheBrv8RuNOWGNhPaHYThRZjRru62rFZ/obibVBsdVlyhnCf61ynA23P5g\nR4eLMl4qGz3WuRJVQX1QdUXsGkJJDs0nDtWXYG8wqyjLJiTKmdCaYKaF+d4F\nlEWd8cAnP96xPB4qbVByu9WT+gWg+TJo2x4ToM7FbeeALceTcpwUL+TD5iai\n+Du1VLa/9NGYdPKwJUSAUiZLqwq7+3IQ7xW4lVLcVPfpY4xrAu74S+E8vCxy\nPJX3KDzQ35yN/lpfoVzCTvKdwM8odBGoP5gSifPcIJIBC96VqSPdXBZ8ERfO\nViKYXCZkK8w6HzCjZAIBNZuchweOkkAsoVOi7Glwr+Bi4nhHuPpJ0UaJ64OW\n2f518dderLUrS+nYrNegip8tXa4cp9M0ShlcC/ORG2gwGQxpqAqvj7VXcokj\nyUx48UOwDr/YfMGYH+m3y/yxyXWKaXOBJ8lkE2mL7hUk+iZuEcJTnTB/scy2\nRavj\r\n=upB3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIA/YYecf1IfiZeiCy/ZvVWMU+a0AVrgE4DAL4QUlEt+lAiEAm0lC81DueK1TGvEwwkIrXOrd/rebsIo7VXPFbbq4juk="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.3.3_1622739111169_0.6238567162414528"},"_hasShrinkwrap":false},"0.3.4":{"name":"@tailwindcss/forms","version":"0.3.4","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"chokidar \"./src/**/*.js\" -c \"npm run build\"","build":"node scripts/build.js","prepublishOnly":"npm run build"},"peerDependencies":{"tailwindcss":">=2.0.0"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"^2.0.3"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"457b558511717a892d366a713574757a15783485","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.3.4","_nodeVersion":"15.11.0","_npmVersion":"7.7.3","dist":{"integrity":"sha512-vlAoBifNJUkagB+PAdW4aHMe4pKmSLroH398UPgIogBFc91D2VlHUxe4pjxQhiJl0Nfw53sHSJSQBSTQBZP3vA==","shasum":"e4939dc16450eccf4fd2029770096f38cbb556d4","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.3.4.tgz","fileCount":12,"unpackedSize":52325,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICPmRMeQwFn1pUS37RzSvSGI//eWgYjFaSxN7vC90Mg5AiBYUvDlFpK7EG3ME0Gi8OeCswUdNGadO/DhMdsWLt1eNQ=="}]},"_npmUser":{"name":"reinink","email":"jonathan@reinink.ca"},"directories":{},"maintainers":[{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.3.4_1632854578368_0.349303747832308"},"_hasShrinkwrap":false},"0.4.0-alpha.1":{"name":"@tailwindcss/forms","version":"0.4.0-alpha.1","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"next"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\n> Note that @tailwindcss/forms is designed for Tailwind CSS v2.0.\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"a7705a91b3d87e0f64e468c88652ea5981be445d","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.4.0-alpha.1","_nodeVersion":"15.14.0","_npmVersion":"7.7.6","dist":{"integrity":"sha512-pmIYjFXHxbj4eh3VI+IVK6GUj7Acv0zzE3l7Hmy/2KRPMiAySqD/glitd0Kd+JFY7xXAKygsRPzHC0SWxVm63A==","shasum":"73314c656639e5f515976d6c1ec8bef9db05ff02","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.4.0-alpha.1.tgz","fileCount":14,"unpackedSize":73709,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDKhKHtWTq7qvWP34bZVnHmN97asTBCQ7N4Mi33b2Pe2QIhANkVe7DJhXboWC3c/k5Fu0+H0MUTscGTIvO5k6QVKuge"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.4.0-alpha.1_1633104852534_0.09495356546735412"},"_hasShrinkwrap":false},"0.0.0-insiders.491a834":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.491a834","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"next"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\n> Note that @tailwindcss/forms is designed for Tailwind CSS v2.0.\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"491a83428488dbc569831a324570236af3e88a68","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.491a834","_nodeVersion":"12.22.6","_npmVersion":"6.14.15","dist":{"integrity":"sha512-xuK0/cO6JGzhICp4dT/qARiYAzQ5EnEFP9MsB9WnMEUsSBiKkXZCB233v2ERGZDO0AaPaBmj/gVP3W5JA8O6pw==","shasum":"feb45c3f249113ae8cd745aa694846d78603e00e","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.491a834.tgz","fileCount":12,"unpackedSize":46145,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCvX/UYYIt/D0KMFUnNp9lcN4fLqWhLF6jatL7i8u380AIhAMQ/RsqBpxvxgEgoFCFhx7A68XPAT1MYg9yh7KD1KkqN"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.491a834_1633417533930_0.6537168103589912"},"_hasShrinkwrap":false},"0.0.0-insiders.2bd8f7e":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.2bd8f7e","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"next"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\n> Note that @tailwindcss/forms is designed for Tailwind CSS v2.0.\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"2bd8f7e80f236f8e4c20710df3e7e4b8eecf4de6","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.2bd8f7e","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-AjnHYycvqfZ3Sfe4T/LSVMk1IsdoO2j1YsZNKEla1sLs1A4lTV/TokIMpQPCIp+nBm+HvRBFhN1uHd/In9pZTA==","shasum":"11d64edfd51fc2b6d01f2e9fae969e205e46c507","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.2bd8f7e.tgz","fileCount":12,"unpackedSize":46132,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDDZWcovZSYGenovYCEoMnQH+kknPMCSJTdXKYUYM+1agIgZ53/czh12a6GEwuW8vLpbgg229waiwaFzCbEWmH7TR4="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.2bd8f7e_1635346504862_0.32100922027488443"},"_hasShrinkwrap":false},"0.4.0-alpha.2":{"name":"@tailwindcss/forms","version":"0.4.0-alpha.2","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"next"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\n> Note that @tailwindcss/forms is designed for Tailwind CSS v2.0.\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"8c970d8e1d137e87d1dfeb94a7d7db6df123e8f1","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.4.0-alpha.2","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-bpo7CkwffVgMZLDMATLZgIcLZZ5PUNwR+nzrJLTbXCG90XReubO8I21HMSQt7Eq2uM9k6+FheZStWKtE4L5N4Q==","shasum":"2c7bc5052de5f6226b5c242147e3a8a84c9aa147","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.4.0-alpha.2.tgz","fileCount":12,"unpackedSize":46123,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHdsaaMi4PXJUFL5nLviFu5tIcLKBjmhYQ+u/LvqJ0+ZAiBv7RbR5j/10Y4lQMEJRnL5fDKO4B8ue+bYiEZ1t52nsg=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.4.0-alpha.2_1636392049050_0.4751042548074682"},"_hasShrinkwrap":false},"0.4.0":{"name":"@tailwindcss/forms","version":"0.4.0","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"next"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"e8e01c387dfcc5c52339baf5a7f20a4ce2e96571","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.4.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-DeaQBx6EgEeuZPQACvC+mKneJsD8am1uiJugjgQK1+/Vt+Ai0GpFBC2T2fqnUad71WgOxyrZPE6BG1VaI6YqfQ==","shasum":"a46715e347a32d216a3973eb67473bd29ae3798e","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.4.0.tgz","fileCount":15,"unpackedSize":75289,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhsjCyCRA9TVsSAnZWagAAc8gP/1biW6z1xJT/hQH2FxAy\n9yMwcFjwlQqflHk8DR8EdN4qvLrwfzFJerFmiRUKaTyqOMxP/oR3BAojbd9X\nkM/3+OUMtVQHIoKtmwgPFZ54492cKUefJ1+OYOHNJWFuuifkQj4I2Q4cohVB\nGlFjrCrDcdGw7z/BjXrQO7SmgfQTX44v9BMwmZ6NUpOQWghcxBINRYSX4S5c\n2vPIQ4Nh0k5FhdYrNDYgPZU2YEx0bvSeeYiPpa7BFaFbzzKeYiCzy7xcEpVW\nW9GIRHVFFLhJjniZ5JmZZco7xHywHcV1TBfjscbmgyq9roHrf4vRRdt5UvoF\nYeJQ5YSTxCGwO558E0iIj0Wbu2yGZnprjXWjH1aVdz1Ih7h/9dBU6jVzWrS9\nwm9DYonXC2gzXKCTeiJci3ubmZy231nL/nYr178CjMy6TbomP0dlknbCRI3L\n72CJwCiQ7scg9imPB0EDXqaoyC1tDOSt99myw+uoQ2WJhze9iIMnCu5Yg/Du\nKusuxat6SbMQTtn8W7QaYWhfudEOaovE2X6IggWvjY2ynLRmMXIJvVs8LV3e\nVcoiwBWhOfPlsfjcQMGoLlE9koW29KLEthHG4QLYkYJwNpzVHc7V3M0Wggoh\nb81Jal3DcrVFfbM7M3vpxl/3jBDGAONRldtJb5Ft/oww3BSNJcfJ6VTuiVLC\ngOW2\r\n=4u5I\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFwAT86Q8mvEgIPiPif2fD8D0cAtfNy3asuDjLUETwJJAiEAkuO8ucK1iRo+UmEnK+cyMvm1BPl0TnQhmQqAtOUTAv4="}]},"_npmUser":{"name":"malfaitrobin","email":"malfait.robin@gmail.com"},"directories":{},"maintainers":[{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.4.0_1639067826330_0.27250680824237805"},"_hasShrinkwrap":false},"0.0.0-insiders.e8e01c3":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.e8e01c3","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.0.2","chokidar-cli":"^2.1.0","clean-css":"^4.2.1","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.1.7","tailwindcss":"next"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\n> Note that @tailwindcss/forms is designed for Tailwind CSS v2.0.\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"e8e01c387dfcc5c52339baf5a7f20a4ce2e96571","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.e8e01c3","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-Nc+oHhNpqFZMl1AlOarIR31I38Y5kLlLrRfnOPrRFAHX77gwKuXid3DwaNvVye0fyaGzcAfTmWWz72NewKAEdQ==","shasum":"922fbfe585373109a64a3fa9d181c735b2d823ec","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.e8e01c3.tgz","fileCount":12,"unpackedSize":46475,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhsjDnCRA9TVsSAnZWagAAO1YQAJ+mPWkccqDZYAvM3CHl\nf6b0oNk/PMqPzoaNzjPRLNnAnVbOmT2WX3g65/T444SIqnXZ0R3kiPheeph4\nwmz65j3MJxN5hQfj/k+hxSjoYYCZbyaAV+MK3GunoyHBVkc8lggF5XbLq1fV\nTT+6lyEP08DFY4eiJi+/kOBbIsUAIREJiX5GVG3WKB4Ko0t/odzKA6oQYQzX\nIJyqyC4v1KBIFWVx0QBjNX+/Iv7ih2CfAvymCXg8pv23n5TUcq+3VaARXclM\nQXBSnA6qsL0O0toLB3YjKfV74JNstD1QS01ut4LBZes69m8UOtKc+cdrcodK\n3xv1kbN0ydJ4QYnPo9Xstx8ikWpuo5X6pne4JVIIdmO3+vE+U/Tz9Z48CYXf\nDrFgT/F9AKnXRF+H9qG6UAIS4U4LWlnQzJDV9nROQvr4Nlja9LZndARzNftN\n5wdvXWIn2oy0gk8FGzdLDGur1HhUhAyVpDMm9cB9q5sUvaIM0Jrl039B3Ppr\n2/F8DvjEO/EyHGYA5WkIcbGOxkJB0VuVpZ1mZK4xn5jUiZz7yT5oBKSzpKaJ\n3XHybGIwzfiip/9PiP/cgw7oEtHiocIt2MmteambpBvzegLQEcrRvD63Rpni\ntF/nn5E7PxOuVwJJeqw6RxM9i5bJ+jKdm78AyxC2c8qBfm3h4PrOuW3OBhAF\nKR7w\r\n=ogmk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHouOd9FwnA0A/zkUy95epSqnHHNVgvvvk6SPVsioNgzAiEAmiSiw9krTw2bh/fKVlvMucRWFEO07NHAZVdmZ3IeDuQ="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.e8e01c3_1639067879439_0.5800707598399941"},"_hasShrinkwrap":false},"0.0.0-insiders.533f0ce":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.533f0ce","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"concurrently":"^5.3.0","live-server":"^1.2.1","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\n> Note that @tailwindcss/forms is designed for Tailwind CSS v2.0.\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"533f0cebcc5b1467393a95fba8003c36b7fae23f","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.533f0ce","_nodeVersion":"12.22.7","_npmVersion":"6.14.15","dist":{"integrity":"sha512-uwGDAE7xzc0ZIxb9IMNKRbl0Mr2ExWKfyd12HHKx9LfGjFV7S6nvJCPQkySCU5crIKHg1JTSUX09u0lCic6Inw==","shasum":"0a1c045360f5acabea4f63c4190d36db54ee7028","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.533f0ce.tgz","fileCount":11,"unpackedSize":45589,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhugROCRA9TVsSAnZWagAAWrIQAJ/mawBFLe59F5ogbb88\nzQJpwxI9y6n8qtIHEaAqnxNDLh+XAmxcu+Izu7N6WBitY+QdsLsIvimt+VjK\nAAg+KWGeczoPaSKeSyf1JewVccT2I9MzkNmVHby22ZqiFmtGC51IqkvRbasR\njcuCFtTsLCog3sQnPa9Gybp28CSozCjh9Y5jQZ5eZ8RYGEQx+9ZGpjeiZxSn\nSfgx0k2CQbjIm3oFrmpBJ+TCwBo5r83aDp0bYnWiLwaFkQtqOz4u1vxWFIAq\nJ7RdgugWBFirSCOJlO9t3c4A4WV2rlmoP+jpjryZlIbgYYo/SIZKtkfGYtd9\nBSI/Xj/sLdVnMgBilo03tDTGaVDGXSdFFOXHHBXOOZtLTTIGrjnjlIsLvDZv\nJ5M2qqOZid4q6z3hNwMHe44v7/X88tbzyxh57bu/LUnjGpj49gZdCklJ8PbX\nShnq/+d0nYXoQqdD3rFCgJCK5OBRVipDGcmgRv52wy7eqPybPhgxSd9pRESO\nVKb5vgxiHLtqJ8OKWuSaMpvV+5Kbw4t5KBfCKcOG7hccfPhidkIuzEBwBxo+\nmxnB5aI0hOZ6SypfFQ2o1XbXSo1pl5LfjiHYT40QNGuoGbdGjBe8Dj4HmFci\nQUZJ2DiBEOZqvjPR4xjirA+EvRtFAebIokdLP1j/41ZiPohj5jr7OOubINcn\nhgWm\r\n=bwYH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC3ZXGRtTmtcY5YOicf10ABXi0StZyIZXmOF2EQmsBjnQIhANjaitSgXIupOpo72JzXNKr8kv5KV0s2ej3QuUSkxLth"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.533f0ce_1639580750020_0.46554353630151213"},"_hasShrinkwrap":false},"0.0.0-insiders.becd3b2":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.becd3b2","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"concurrently":"^5.3.0","live-server":"^1.2.1","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"becd3b25bc91be714d8e89d5530a8fdbd6db3861","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.becd3b2","_nodeVersion":"12.22.9","_npmVersion":"6.14.15","dist":{"integrity":"sha512-TCVzwC/7f4mu1+j6n956L8YRqyTFrT9rFr893yClf68U4k8+Ec5OzHYD1KzjG7k+kzt59uuZDiU+6lgRAjCpgg==","shasum":"16f998efb8130284060ffd4eba87b50e9b2d345f","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.becd3b2.tgz","fileCount":11,"unpackedSize":45522,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh6bRXCRA9TVsSAnZWagAAGr4QAKDjfO4Cn9ZvtiiuvI0t\nJ/kXeBu4abfkLBzRzbWSHojRhjck0Q1RD95tvdxVgaUlG0lLKiAE1HFq5Sz2\nfbzH8alZWsWT2Gz0/f1UR3uq9/Y1egPFwugqSMnA9qIxtFbhwpVXkI+a49mv\n99VPFc0XJm/J1bp+nbW7uGipk9mj6IBKVRDJeLZGVP4YySp3uQbZXwkk4MdL\nZcl/3vEdjbSPWNtzVWx4Hvt7gFb2BKVwDWyBcpPdLuZKyk56CEYDlW+GbZAK\nnaes3JQ1Ux4frB0ZcVca33DMiDDC5Y9dKiyZG2ajW0HbB9yPwBsK6Xi+MwCO\n7+8TQNrjt7mq4SMh3ai4ugPx5tO/yj0fnv220vserptQ7lU4710uCDc8lIP4\n2y8rKXSDppRyAmF9ivnCIN7w21M9jrm+9L6e3B27x9akEYM8fyOoPBLx7HGP\njnfstwbwj4fPJym0qsFbIXGl7On7oPQmS3H4DKsRuEJLq/1bdeIBhB5wmd/9\nvJo3U+mUqxpgdgrGuyl8gDO+RDiFoG9BExJwk6kHcb5E69KftQEgOOajeIY4\nVkaMlsRFRrteaGK1WopjtZWzmWkNFXGZdiamjzo4K+WXwvo9ZoaxBhJby9S5\n57BMRMR/mJLjPYa88dqMYQX4SHEqorEZGJAd+TGegOkjUj1odlBTAWP/695W\nPnXC\r\n=4igw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFTAhj8MYATQ3a3Pp8cIJ2QzbgiraPy3K9XNE2LFk6m4AiEAt1G9aH7X1kXeV7anefMa/C/N/HfT/XEMFbrtqAwQYfs="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.becd3b2_1642706007616_0.6238372748294447"},"_hasShrinkwrap":false},"0.0.0-insiders.e17d25f":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.e17d25f","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"e17d25f6d3cbeda126d9dd03f7f5890f0c6201f5","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.e17d25f","_nodeVersion":"12.22.9","_npmVersion":"6.14.15","dist":{"integrity":"sha512-BCn0h7iae1lpVy8gr9TotuPPS5W1N+O3gQhlRRSiE/T005i4pNWVHULKRBLJy3Nb0Ge6i9dBEZqsR1QrA5penw==","shasum":"71fc85d05abd43f850845874eb97cc723741a44a","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.e17d25f.tgz","fileCount":11,"unpackedSize":45578,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh6bcDCRA9TVsSAnZWagAAEIoQAI484cCq4qlM5zrz4QDe\njY4AwVuZkpoBSs9+xceO/vUh5zvbQYhU1PY3ySlpTQCuDoU85JoIVyETdHkf\ng/gvPBZY9THY3vPUkmW/0f+/Sgp5A5rtvzI2EqFzfRLNn5XwXXMJQmfwN7Fw\n/AXY20CnVv//7UYOB9JMopmtmxRHH7fNrbp7iiDRby6sPQriUwePL5rhRyMY\nZu0gmi8M3mRjfP1ojIlFQvH36AqSeW9HMWHpHMcFC/EvyHSdAQCu9es0/ImK\nNYJ/inYjoMhzgqz7R4+DIPbbPuBw5QUZOf9JXGz1pfRLCrpA3T1lskNApBFz\n0pROAejevow8U3FX69+kPXwzzdl3rVi3orIqhXD30GMoQo+Cs0QPMcUB5x9p\nprjQDQ/MumqRSt7FAxHcdAGcU3fqLzM890/lmW4MIJYOTZ6ur35tFb52w0Ut\nNOASIxI5DqoJ93uBM5eE/6R8NLLPfvbEjT/HYruG1WIYCuMhoE/V4ZTcL0Sn\nji/a3DUoSSYXK2NEn7a1243UC3Om0l6iJP0npRxPhFIYyaJ0ILc+xXTP9dyr\ndl9fc9FSjaujnN88GQunhQK5wwAo5XrfqvuU4rJQ7joFjKgPtJ++CVdNMHgV\ny94gF4L1L2DpGiHHuaecWAMy9I7y+FyIsfuBkcngycZQed6k9uFGN+1wZqEF\nguXP\r\n=gJeL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFovxLswhXBRC89Mx7/5sZCinLtFwtCSscexjUvuT5d9AiA4z+r5WaQ/8uw3yrZpHXLNIFIlGIFnEtmDbyIMUxrAdw=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.e17d25f_1642706691581_0.9013352063635969"},"_hasShrinkwrap":false},"0.0.0-insiders.bb5315c":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.bb5315c","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"bb5315ce1b53b585ddbc51aad27d6fe7e1682175","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.bb5315c","_nodeVersion":"12.22.9","_npmVersion":"6.14.15","dist":{"integrity":"sha512-tXG4NeEctJzHnIERjxId8OzBRu4ZIMZKthRdLAIE2ylGTjVwRGfsTYmlSYifYGLtzIpJmj21eeC9j6WlFcqruw==","shasum":"9bb79c7c6965164476dfd4a268a3ee9c32e60ea7","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.bb5315c.tgz","fileCount":11,"unpackedSize":45579,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh/t0aCRA9TVsSAnZWagAAvAYP/iUfDbfMq45G7N/yS+YT\nLXlytJ8A/3nDaxv+W5BNiFL4DySfQ4Atmhekr/RZeTnnEa6OkjQWkahhIiNo\n264yY6grwTCxb8eAnmTVDlnvdvoUOCFWSVhfjuzRTs5yHVMyKKpeKwhwGkI1\nCjddtglxJAnsUIyI1GISO5PuTmI80mFGujDxgWG/3j1KJ8JNkKYAJkZa7g96\njc/xqeNTpE1z7/kbValc0JGpGC9/BJbb5jyQ+UCoNToIgNlXVw1S6PER0xf8\nJgeZdJ7cBq1/784NowRvLRQ8qRECAFdWEwH39oDQa/mR4XMLiCzzyD/7aCN1\nUoga4Z8oseA5awZaBLoMlWKBWnwA7PVUNRVxnBD21fI4UAduFjJEYzAHz92m\ncYfQDSNiVI3JNpvUPLohWpatXeNK6mhvEiO6vVFTMGzK8AstCCQclJiXGkbw\nTmtE1tXN5BZJ1OYbUuvKqEmR2mHb+/3yAnZYvmdmtBTi9hr6O6w9xqxBMeOo\nWgq6fQ01QF993WQI0hZOWK88zBFgc8bRKRyjG5NIftocep+SmSSZsjJTfnrH\nAIHWkc9lJ6CMM0sVdvQ6X1Xg1mEi87o3QEBFwGreoksElmS7fgmsp0J4dX5P\nJshzlEmgOhzBFWHcbg4pNflamcvzOG4jagI8TRWdhHvJI68P05jhVOVmH45f\nxNpH\r\n=0fBd\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCincLOLJbPzBC/GRykm7RfssmqB83V4ZcLYxrgvKhKbwIhANuI551+VHGvZYyz15iAC8U4q24BgJZ6Tsa3kutB/I4f"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.bb5315c_1644092698212_0.6933729239463053"},"_hasShrinkwrap":false},"0.0.0-insiders.807cd40":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.807cd40","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"807cd406fa9dfbf07e6a90ba7609c72cf67834e3","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.807cd40","_nodeVersion":"12.22.10","_npmVersion":"6.14.16","dist":{"integrity":"sha512-VKvBrqKfC3OLZu5cYVB1sshCxPQlEhhHGIcjtoUqqv4e5IQeFAUGd+ORNWu0/A8ReFhFIfsiEj2QEtt4pQyOlg==","shasum":"0b7ac5faa9673e2a59049fa76e79f1a12178a3a5","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.807cd40.tgz","fileCount":11,"unpackedSize":45674,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiFk6uACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqfbRAAipvveNwbHepnPFMk+1vT376RzeHeFnVedsAo1SqNV1Ls94dl\r\nPY2v4dQET1S+7aNmTO0jul+ZjV+ThyFYCcpf2gam51XUVftLYm242fMl+Kpk\r\nQW0AVJNsOVchAuCmhG9VbJ0SC4yh/4Oo4ZbgaPaRHPvY8SRAC+mYnhL5K4NI\r\nqYKCEHSHGeW5bko/6Vt9TDdFCUjL3fDUAU9C+8va1F5khZetkvxvFmdH+eRy\r\nobBM+RnIxNafG2ivhTyCS8tJan1rBFVTiq/M6/2w19oFzEqAtErLUSgbfJeB\r\nteP2KPC9rNAhUnTWcBiBP592yX6vL6lSlXTfJWhrx0cbJcT28ruMbANYgMc/\r\nxWYHrg6aF9Ix4FJ8FKXTlScJPPtv5Umy9L8YgsTgn22Qw2LUB0zxJJGtW4mM\r\ni+f1P5pEgD76U6p7HPSRus9DxzfkkWseUNjl1SNx+ahrNH06NtTlPxALIHdY\r\nuKHnAJtVDOtKhR1fSoNsG1mYRqAz3BF1TnnK6tatJVQzt/MnP/KmOhbbleBD\r\nfIBJosfXwjAcr5/7rTelb+R8HpufiT8xFc9bDT/e7siLHZfL7Skq6oxNOMQP\r\n7FSMddN5Rdv0NnZJPD6pKi3U0st9cbhm4SXmwJTs5YoV2wVId5F+AXKdbbWY\r\npuPVK98YQwK2WTfKE+dF8mWGGPP4LTkVpvo=\r\n=Lv0o\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCEGdpp9B/siGkAF8WaOMxRnbgxE6S3gipGWzwaGoYhcgIhAOLiV0Ig797EIEmURQ4dMcW/BCH782fvRjjMlFTXoP90"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.807cd40_1645629102735_0.38285817230324626"},"_hasShrinkwrap":false},"0.0.0-insiders.d7b1a9a":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.d7b1a9a","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\n# Using npm\nnpm install @tailwindcss/forms\n\n# Using Yarn\nyarn add @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"d7b1a9aab73895a639e82ba61426ce78854bccd6","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.d7b1a9a","_nodeVersion":"12.22.10","_npmVersion":"6.14.16","dist":{"integrity":"sha512-F5l5NdfUsupwE722VlTPLVJbYjEEgixbI4+N/FU49iEkRwmGd60hIgF1qCmedZ92OXCOzE6ygYDp0Zm9DOREhw==","shasum":"c2dc9cdf66f8b55c08583d6c93c7a5a6614f4e19","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.d7b1a9a.tgz","fileCount":11,"unpackedSize":45794,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiFk7MACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqRjQ/+NUBaCol8lI5Btim1qzI40f9oviTSDWM1698ou8CGSEhADb9P\r\nP5ElF77z6t8mEctM8AGLp7EGuKXm+NNZUPkKlyYgiWaU1r03RwD3XSTY2yUZ\r\nQbIafT1ivJLzGY8XAgeaWcetj5wFJhvNZu7sQ9nL3KH+Y5uOJT1RlKJBdV89\r\n0gMFDKuSqfREpELS8TDVKN0YORz5sKnjbAjlpHWhPLZMiEDPNJMgf45veNhX\r\nb0IYs+w3CGtV3EGW/08Q8xcNrnZrljhb9Oxc8B44jPcngx3JE+9kLT7Fnwj4\r\nbgeQT/Y1hNkTTVonhx39UM6J28/bukL7XTg4ntVJESxVqtTEVV4BGnX6yl/r\r\nbfRlfgq0cIhT6rvZU4IaXdgfqbV4g8+8jpmZf+j7adslyVZx4xbcUbItX4Oz\r\ns65gk3WmR01LCQPkhbC+vgeee/+Kire/1Mte3wy56ZzylQwBsse6UQRc0/Xs\r\n6lPqZsrc/Ke1ie9yz6HLIVenXTRU5Y86cj/DSMRp4IBHUeYqdahIpqMhGSdF\r\nZSVUPamUSjt/9U/qy963Ctp978xwuqzFr+E60GWQD/tJBdHcEv+sUdaO2zpl\r\nrQqhonidoLyl6lyBkHDrHjaD+kwpyvBbhnzTNDMA93QT3rGm87Z5+7TFQcgz\r\nGNvGyF13Suz+2cdMZRvV1RLf0C23IbUqvEk=\r\n=tmKv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIARq+IlCh4mUPm0LpcgXTRayyj55g/a8GLKibZdve9S6AiEA2glS+tKJtw/LCGGUHSL6Rg+wPcLRcwIzhngr4f+IGDg="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.d7b1a9a_1645629132744_0.7711834505900443"},"_hasShrinkwrap":false},"0.0.0-insiders.0b1e872":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.0b1e872","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"0b1e872ab30a7073fe283c7ea75a63ded7398206","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.0b1e872","_nodeVersion":"12.22.10","_npmVersion":"6.14.16","dist":{"integrity":"sha512-/Gobafp3K6kZDHt3mp7x+5mnsUOjrQafMF5Cde+63JxEf5vIhDkjo41JSn2V93vbRSndzCevuNS0vYNElddb/A==","shasum":"d75e791d7cc4359fd0d9c216febec20ee2ff1282","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.0b1e872.tgz","fileCount":11,"unpackedSize":45743,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiGOYgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrN0g/+K7Z6MJFUC82Mb80W4Cz0UQtrPtihF0F59tmJNoTBcJ6bQqkE\r\nH4Lj/THEdlIBaWXEgmAYBceA7ll6B7B/fU3xLMYD+/WoB8jBGtTy7Lygmgcu\r\n1Tlo7ltmUMrviBT4lS49VX2DtDkhMZhAPA5EWnn4ChqG9MBYS7yP9GDmAysp\r\nvg78ih3RhJAqI0yXLeP4FNVUr8eV3QdmqMeNklJhPRm/aVFHlZmUW+e/JNke\r\ney0mIuQ123k+Vwd4oAM982bPYjCtf9UY0z6rYFkEGND4vEcRGZYUoxEwBf9Y\r\nuE8Dvp5sXHlifu7SlkiCt8wMFBFA9Pw69CCxs+apLF2ig/3Tx2gld85KpIMt\r\nyGeOSH7l5gVe3bv/88G3CEn4MUOOAYAuhcJmR5cLeHydff9chdnC8MWmViYM\r\nJ2B1s/j/s1Y3oFZ3SURMNIT59pPMKRI7ocxeUa4U6pOvBv9+49ycF1j1zNFF\r\nANb2gC5O6OIfTcPVqUn8DZLWmJjpbi+VWZQvTJSgK0a8KGxwpxtCS5MNKSEc\r\noaWXgHnEnNcg9P3m6P1AJagkbdUR32q7+KKqRvgChSURQf5q7woDUeZYYBZq\r\nWg8RdI7VPZRZdItq7OEU/i5L9FL/JbsOBMldLvdil5NJLjdcm6msdQZpZ3Hi\r\nU6WieyMcyMwf9c+ir+WhxcXrjvJqImL/q80=\r\n=yDMw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAvWid2w+wHzK538ctPavNEEVuRyIasqIeNX7wQJSyEPAiAQVnFQ0ezDypg4W8rDOnXBC4Utp31NyBQjMUcVFP7ZlQ=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.0b1e872_1645798943858_0.6082524746773064"},"_hasShrinkwrap":false},"0.0.0-insiders.1bd06b1":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.1bd06b1","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"1bd06b1ea5c38aa5e16e9a7b234d3cf69a79cb1f","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.1bd06b1","_nodeVersion":"12.22.10","_npmVersion":"6.14.16","dist":{"integrity":"sha512-GETTVwp67BEtW6G5iZnluZwCAbwYNJ7GjEeyDJIVcRrVsG9J3hE/Ihvzai+bd0qtLtdSg8PYumr30t/ayYQ46Q==","shasum":"9ca4d5e9dc732fa54dc89096efe30c855bdf5ecc","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.1bd06b1.tgz","fileCount":11,"unpackedSize":45771,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiHOlRACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmodMg//RWKLmhLlw6Cf/b1XFDuv2B3SinRCqDVD3BrHwbjwcHfx6C1F\r\n4xPErgrxfstqksf9dFTUWF0J6r35f05kV0KNNAMwZdUpTJE42x6dAWPtgTET\r\n14px1U1UMtIaAAHTHwAFp3OD3TNGr+GQbv0k2t/V33onRaxPa/8haCdSfUmi\r\nnNSnyetQTVhgszH6ZmaypoCRmqs/Hb8QuEw1PahHUx1qveZjWivinlaZ5d7r\r\nE9f6XDKIsp+ZXgtqNBH4mLoa1gNWppMxS4DCmpVaUzJsOV+yigADzb0uysnY\r\n5qP15waMflgk42fHFTty11dt0sAW4japP5vGuflTjvb6MxTQDYtDZkF3ogMm\r\nAOg/ZA+FhCmS2pZPdo4ZbQN8Y6musJiEyONmom5Ycp6Ok08SZQg5bEettvia\r\nptPbU+y4zbrj9JVvFZjFwqMDhLso38nUVU2EHLilZqTWmEdiCCgABV+IazwS\r\n7dTFGiPE8+5t6NGaht/tDVa0kga1QCEkRt/Mj89xUIsynyqMx11UnOQR9+pd\r\nKHOWzlvOXdEQv1Y6mCGa/ybDxzMs63/BUYsukU3OfLZ86WpCVnFQqdi5hTYP\r\n53dCb+4r+qycKjP0zzOiyihlF3Wu+qaozTidDOtllrbJsUVCDg9KiDSEYHM7\r\nKPB7C1zmgBH5sU4GilthhNNoe3BfCnOn8NY=\r\n=8WWY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCql41Z1m/MZQEOmwPyrzyhHlbD8By8oT3zB2Bi9XwSkQIhAL12OcqOopjtLc9Z/5QUJ5CEKsbnLUfoFVs6rQNu67EW"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.1bd06b1_1646061904894_0.9263000357885631"},"_hasShrinkwrap":false},"0.0.0-insiders.99fbd47":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.99fbd47","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"99fbd47374b0fd359669b4ddfcd82cac82b8a741","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.99fbd47","_nodeVersion":"12.22.10","_npmVersion":"6.14.16","dist":{"integrity":"sha512-GhTqrmyPYpjnJ9OKiUvyMPbCnxrYPVNvyUpao20c8RUQyy6B4wk4KTOYjwwA+aqbncNNw0nXhb3Swmll+tH8Ag==","shasum":"e96ad2ede26f641d3e49fda7e24e09ed0f136ea4","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.99fbd47.tgz","fileCount":11,"unpackedSize":47292,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiHpeDACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqytA/9HKSnhMmjbo7rX0OmgaugjdNu8BMPzaT4MJoqn1mUN4ssfRYq\r\nJVYOYXsB3tTXdkSe5uNyTc73lVHPGG+EZO0MXEFPMwASzj+DcR7RMvLr2l9c\r\nQVw2cfIZkrcRX4qBPU9tgKKq2jdlt8yql4tL8G1bN+RzUuo6VUHZxwhqq3QH\r\n2JwrJTSqIot6vvKO8vKluEJBNZKF8cnaKsZ7bCIlnL5GcEN0v3MbTbi53xSE\r\np6NZNHtbHhBN3Iz+tyyvXM8NlSlUIEsJ/u4mtyDPpTPHdwzyZlsrN5/pGrjC\r\nAOQgDqf5zm4P4oHJJstkWavjrNINIaypd+cFX+BaApOQYofBVnZXollSlOyL\r\nkvHUeAngqb9ExmmNMpn3aanWmbdIsih6flXoayKHo/VSHNraV9JHrUXIkH/h\r\nJWcE6RTzTjfgvX5s8AwnQO8sdyaAXsIicXoJO3nlzggr7uy2UeKbzPIUqUWU\r\nhRjGGZgtu8ha9gck0C1IIyne/CVglpRywdNzI9DV6U5CPRgOeNJUZlyeEdRy\r\n3RVZsJ6YVE2tEuS59nsPrjiRq4ks9CWoWmXrwIMDEXqD6EmOpjhSqE7bnhj0\r\nXdu9ywP7g7aui9V68IbwBuM5rDyIymy/0hBzXvIev41ncncGFnwFDi4SVEHs\r\ngK0oFmGTYB48IX9z7oJDXLzJU5csjKTYLh0=\r\n=y5Lh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDoq2XcfbjWVnIzS7N3tb6/xrrqlkRhNoTM5GEE9DeYEAIgJHQAs9Y8sQgkuqUgmGS9g0P7AZjzgDrCQ3FHdG08hwc="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.99fbd47_1646172035350_0.9591349394726818"},"_hasShrinkwrap":false},"0.0.0-insiders.9a0c0e4":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.9a0c0e4","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes instead of element selectors\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nFor situations where the default strategy doesn't work well with your project, you can use the `class` strategy to make all form styling _opt-in_ instead of applied globally:\n\n```js\n// tailwind.config.js\nplugins: [\n require(\"@tailwindcss/forms\")({\n   strategy: 'class',\n }),\n],\n```\n\nWhen using the `class` strategy, form elements do not receive any reset styles by default, and reset styles are added per element using a new set of `form-*` classes generated by the plugin:\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n","readmeFilename":"README.md","gitHead":"9a0c0e44adfe21087696e3681f07e4cae4988677","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.9a0c0e4","_nodeVersion":"12.22.10","_npmVersion":"6.14.16","dist":{"integrity":"sha512-xIgx1miTO5aGClVzHh3cZ4nlTry+4if5E7HI6kKTfbGDoYGxZ2Pkv46vBxGPmTlhmgRjuZA8oAEEbDVadp4CYA==","shasum":"65b9348c8e312ac8c4c77b36275a5ea1fc18d93f","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.9a0c0e4.tgz","fileCount":11,"unpackedSize":47414,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiH620ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoC0A//cVn26Xj0Rlxe2c6/FQbrpthjaz6DyQubzGDrd25e8Q86MDl2\r\n5gORH6oWMXzffdQRCtC+tzLkXxpa7i7ETS+7G3+RqPSpjShFzmKNPcOCf/VE\r\n+FS7myMxbmDXE8nR8FdjYkJ+DQ35h6264Ck0EQgsWfEJNfV0yt1aydAs4BwF\r\nMmru1rXv7snVT4f1Yryswo1lVW2F67bIaFCG9cXh0e4a0Y4ncXv4mj+TKWW2\r\nTD1G7tfbMJKPhYdIw9n3RKZKet61VG68EJSDkBUjWbEb1NOcKn8+W9Y8Aula\r\nZN4AKJlw+h09f6eXoyCkC7og+5Yd8J3ulvd6QuDINWFY3aNd+oag8LAj16x/\r\nkSm1y2vZRKNzoDjapfCBytijze+5KGyRpDE1Ah32ZQ55hditDmt7pH3a9PJt\r\nYdUc5lMwR7YrQUEaMs6judYoMv3NAASEwnsKpKPCnG4kzDtvrOopx7SK1/w2\r\nJTzO43csBQDTw48lOzIxueAH1QQSn3pI0M5eZEN8L9IiE1eCmaobiS8tZpcL\r\np4fxamAE+yURZt+s2DxLB2hsDrellt90XA92+iwwRNWWPac1wGwaPVm2puzQ\r\noevqBmGS/wDNbx+JLFkHxnsssLZ57fLCxL3wezZW6M2zsKNTy+YPCCYh9xrb\r\nk9L880mS8R6Si0HEFSq9HLpnyTIRp8cl22E=\r\n=59yr\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDoewjxr74ufrc7H4qltPWaDQ+J1XWRjBoZ/27sdRDiiAIhAMHLwOivtoNMwOXz/eTg7L+X5l0b5QBUbLFpv6gyeS5Y"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.9a0c0e4_1646243252455_0.7352977490395578"},"_hasShrinkwrap":false},"0.4.1":{"name":"@tailwindcss/forms","version":"0.4.1","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"9a0c0e44adfe21087696e3681f07e4cae4988677","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.4.1","_nodeVersion":"16.14.0","_npmVersion":"8.5.0","dist":{"integrity":"sha512-gS9xjCmJjUBz/eP12QlENPLnf0tCx68oYE3mri0GMP5jdtVwLbGUNSRpjsp6NzLAZzZy3ueOwrcqB78Ax6Z84A==","shasum":"5a47ccd60490cbba84e662f2b9cf3d71a5126d17","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.4.1.tgz","fileCount":11,"unpackedSize":47397,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiH65bACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp6tw//arqT1I10M6dWeOCGJg3oeW9GfNtFjFlSGgKu+fwrq5QZEklU\r\nJC8Iu8VdLumE+Kx+Hk6AXvG1ovZ15NfD9jaYH3obNEcM/KVrOCOtECXHYoaB\r\nD9NsUSfZLkUJzIDnozxCkyB5lbCVYlcXa1prrNNFvv9iwmde84N6x6o0DALc\r\nbWatAoE/xslKbBdYRASyKlAvspLqa1lkUSx84IT6+HO5kvo1GfV6AjF0vFCZ\r\nFC9jcaSYsbUripBdy+QWHJYAvgbXK8DNRiqKytx6+hhSsQNNZTAyenUk0ycN\r\nfANj685Hd7qxPHBps6GuU+eLkkouxy9bmwL+xsEkcZlzp8i7iHO9YVc8eycP\r\nRBERMgEV8Vnmey2oqyi4moI8iG60yq1/8hPaGlyhw61YFB88U9J82fyZgbdE\r\nZ5WV1xZoRF+nq2oquFAxkoZ2BHtahDwbH64X6Jw/PyT7eWXnvNYhxrjEYkLw\r\nIy9lw+LAN6U60OVPLAwwAGjeUnXHjhiE1XlcIo556KaZ+AJF/P0dNUYshYPW\r\n6rioUoCqX7oa38bK64IFVnoyDsarvT3w+7AvNHIr8MaFoVCe+PY+j9kHL7Hj\r\n23UeI8KEP7HLxwT2RvPFwTtLPdEtjLZHMhTsR29AgP3kjfQpCIljaUG/m/Nm\r\nGAm+5Ou6oMu7xGvDgCXu7Nvm40WWyOYbDiM=\r\n=cXkr\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC728UbvDZtvTS9FzwUdLJmzeyKmpmzk5yQyy59t9HBpAiAIpFb+k+nb4ZuXIWYLRsZAR6UJFuCvvs1Cy3TDHZtgXQ=="}]},"_npmUser":{"name":"thecrypticace","email":"thecrypticace@gmail.com"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.4.1_1646243419624_0.197607734928003"},"_hasShrinkwrap":false},"0.0.0-insiders.1871f90":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.1871f90","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"1871f90913ba9b561a0987bdaebe52997892071c","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.1871f90","_nodeVersion":"12.22.10","_npmVersion":"6.14.16","dist":{"integrity":"sha512-UNV/cR5jRCkzmnvYc6hzCvlopyuVYGcY4PE7j3VbRmNR+crZLOkoJeNy6+g0JfGVzfadUOSFUWCs+o00a8NAtw==","shasum":"6fde693c7a7a6eadd51ff7ddb6b9ad52a3b1728b","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.1871f90.tgz","fileCount":11,"unpackedSize":48118,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiH8RZACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrwuQ//e/aPRA0hKNxvfLhPPGJRDemghjz3FpgoFmnYbC7avzy+kQeS\r\nNtUy03UM/Sza2N0TCzkR+SeG/g9q1Tlx+gVSwOddOgQAeKsgYDiVC1vYgPvm\r\nce/tdIIrEKw+jatBUClu8Ocit3ap/j2uiJ+tbbYdnk5hwJRm7Az5UKQfrGbh\r\nWxQv5a3nilINDaZzzpQ91K/mifdlTGzIzKjcFcDrbOnwqEHc3c9RjfSo2Gr/\r\nE/phWnZKyJOjZHwNTbzRO7auo/p9n0RmeMun3fCFQUtSEjnL3h0K+a6E+F8G\r\niErIdTeBytm6vJ3bC9lEBnpFeCmXAu+7QOwouyVOs0d930y0kJ2C7Cbm5Lmy\r\nefaJAZNalFXSuTA0l92k+dQIfxwPIWx0hfYyn17yqxZejJf0YRRoPUiKWWRa\r\n9hX2okeV/hseweSvyKd3zlbeAS2FXhYZGfjzHa+S4z8H/kld94/my2vSNLZR\r\n7/efFEWQiznhy42FFDtblZzwQ2+J91k2RuD5YT68bE1OgN0eGRpAjGi5e6ce\r\nM+GbtMVIQ6kd0n9b/TGnngEHk6/3UBbI9B+O9CDtKsr/CYXWN4OvRH5KeDht\r\nWCacyUPwqYmc7G6bKJf3c2iAeuWeXJfJQbk93dva7be4qxncTnvnoKrdto3a\r\nOWihlIj7XuxK/ie3QyYsaAhJktDK08oXbiQ=\r\n=+9jB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCYpYGCWepOzKiupAWXeMowKwnDdVb42ize60YzC8QKEwIgFE3BSmMo1vb9VLaj/7TzIlLb+Fjv3fBpT8V7+jolkBg="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.1871f90_1646249049127_0.5263413947218287"},"_hasShrinkwrap":false},"0.0.0-insiders.3103e33":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.3103e33","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"3103e3329b7995e6be7a69c36f4055dd405bb2d3","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.3103e33","_nodeVersion":"12.22.10","_npmVersion":"6.14.16","dist":{"integrity":"sha512-qZDcKYUfV9ug4AzNOwFYAOwnWvd+CG9FENO34QzFsbktI6N8yKmZYAvqF2KLM+um3uEtyLI6SjDHn5YV5/wFgg==","shasum":"0f0c1c374635cc0943ac0e6f7ca3bab7e1392cd7","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.3103e33.tgz","fileCount":11,"unpackedSize":48240,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiH8WSACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrkBhAAhHaWOXuzm2z7ZL6DaQOf1PH1ThJubpdKrT6pyyiJEo6ta/jy\r\nC3HJaKx4C/lvtiM5yD6rSGuYXw+3W/xosvyKFimzbOvf7+ZjAWSuzVvSGaox\r\nLWbGy1dgfrPY0Z2jAmHh9448uqnCiU6PCKZhhxnI31HZVH4X/cqNANb+VF+V\r\n8SaFvn5z/WQHyLaAcBw3KLgv+J7qGXKkZn3WnQFsu2/qBrQDwr4RRz93gY6b\r\n25Jp9jXV4Ya55dySglQ+qIvDD2Q6ql44lOUhwpc+s5FUeQpkg0puZnkLfkPe\r\ngNewVtaRdv6tJECkRb44iBAMlPg3SStMDfIeW57T64s9YmS3RDXKhXz8PAI7\r\n1eIpb/EkHnlkMax4QriYG1zVWrMGX5kaw0pZhlbln7Sip2sV0mXP1+W+4Pdm\r\nWpF7zyjXeu5YVlz/IrlsSquqnhDnu6RnqD67TahemI2Gh6KuEEFtkwqhjlnW\r\nQXKaTuFjG/cSRtngc2Vtfx8PBDwaMCdaP+qgluXj4LtGARP6rR8ax+RBijwP\r\n5Y1N2pMb0OLBVtUsuBKnAxwmCpKGEgJ4xDxOxcWRwkEeDVWKFuWUgpdBq8ZI\r\ncP6Y6VjAPDDLvEO3+xDVD3i2egUaCZxSUU4HqETrMr6j2XlO9wJM134p/T9M\r\nmBINxR3xffXChVB5d6IJxI+LBsgD+0yNXmw=\r\n=G4GL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDa4Z/Gfa591ATiAiEX7X5igBYKhQ284cnsUrY159qtFAiB9zM0rJdfDSNtrRwmNuLK0Q+ZvRVzHMy8PsED+DV9RDQ=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.3103e33_1646249362821_0.10889295580881675"},"_hasShrinkwrap":false},"0.5.0":{"name":"@tailwindcss/forms","version":"0.5.0","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"3103e3329b7995e6be7a69c36f4055dd405bb2d3","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.5.0","_nodeVersion":"16.14.0","_npmVersion":"8.5.0","dist":{"integrity":"sha512-KzWugryEBFkmoaYcBE18rs6gthWCFHHO7cAZm2/hv3hwD67AzwP7udSCa22E7R1+CEJL/FfhYsJWrc0b1aeSzw==","shasum":"d4bea2560a10aac642573e72d3b4d62a88960449","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.5.0.tgz","fileCount":12,"unpackedSize":68088,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiH8XQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpueg/+MDAWT1PfPOnjBQO80iFGVujh6omDk5qQtgkuygGioGVbsSR4\r\n8Glg8I/2wDNHXvCu5gFMAZitnNrxcM95FKq5JEvcoSd2zPAs8eYQKt78/tAa\r\nxN30xCvgs7A2gxzcZEcLPq3zsl0WrB52bUmQ21UknTCK6ymGDDv+q6RekqO2\r\nR3aOqRrDf2Rkb8Aw3S/ejg72xan80+Z095XWsL9Ud8fBd2qIHWHHQQc7jo2D\r\nijdevY1ma9Zq7xpEleQVhvdQYv7I65kCu5cfHeNtrwMoIX4PV1aL7I1vX0xr\r\nSf1vjRUJ2zxzcjTgxf30DNBW0T+SspAeUlBCOlkoZ0iqWVZvbb7krhwkSHoA\r\n3z1DAZERx/WgaK44pYSHnPSmYPcQ7Ek5Mcd0Vvv7rLZqdRNRYCmelHExguB0\r\nltEPL/eswOGFd9TKKiQqsra1RN7MY81ExpbL/ckWoQC3oj7uywMh25kQcQc2\r\nANXOKlxkGEfhkFetA80eEeUkqiQ7Rtj5x+Yim3xs/kcGf0sXHTAWv99Hos4t\r\nRRQgagUkVvDjEEYINPEro8y/aMS0RPc6/STxavzfZvx2ssKPGolk8gdxDrOy\r\ng0HqV9m0e5D6R4LDsdv1XTYEWCCV+rUympFZieXOP0NrfsKKqRx7Fv3EbrmF\r\nZJF2q4Z6Zbvc5m7CZWCt+232JUkQGAVsCm8=\r\n=WN31\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID5xi7RWGKb0puoQOn0KnO8Dphq5JemnijfkK1uBZkHEAiEAx7bSzpXpcGAfCrq60LuW4vll9uc2woWVE9DW//b0AKs="}]},"_npmUser":{"name":"thecrypticace","email":"thecrypticace@gmail.com"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.5.0_1646249424095_0.5667457974686982"},"_hasShrinkwrap":false},"0.0.0-insiders.37912e9":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.37912e9","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"37912e9554d92b32f9e5aa4a7c4002a184682c1b","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.37912e9","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-hTdp/PdQuSc5c+Yr5LcoDkJG1+RvGQ8UT4ViN6ii6lh74RcRVPxIy5lirafLF+aRw1l673P0RS9Lepjxq5/vFw==","shasum":"c3fd5bec1cdfa7def50d2575cf079583b35ac10f","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.37912e9.tgz","fileCount":11,"unpackedSize":48237,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDaBxl26pQhFbOk5DK3fG1yEaoXvPC5p2sViPk4Adde5gIgJgyiCd2ZGvYjf6fzR0Hvdg0SirXKyy2g6GX/n/oqbgM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiXA00ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrGGg//TCDVvjsHWp8T/Y6/YyO1hd72spsWaewnTVg2Y9KbQQPpcNoY\r\nGwTKj027J7rV75v1Mc+Mw/gDB5zYyB3Uh4a4Yp4Z3V+G2PfFBlKx3/aDR55m\r\nxV6HZ/ORICxBxcRxl8t44p8cjMjd3t6bpH0GgHTpFDXpvTzYBaHFpPsoQprz\r\n/EQDolBMlChpETpizg4+38LFKQAKzlvLL7Aap+pzj5XdugEZ6yHhjtP1b/xu\r\nMTC6ANp4KTfqpIvW1Px1iFmsRXM/BT1x/PzZujurFN2RLhCzGWer/pd8xWR/\r\nG2kxIdOjW4olTmUno2BLWiT+qoFAObXc+LfCeLjdokIFJHhBh7a7Xc3/8goF\r\njCJPRy4EcY/lhMDpFEVt8ez52/CUuDJ091fZjrG+EsnDQXXIxInH1rDecsIC\r\ndfl99lWpwTee0sJMwuy4f6auwWZh6PGtiKd7w88Gu1o3ToEaaDlWAq1zf9CF\r\nl1iEAdKcOK4oPkZJa09fIbdxjVerx9BKH/YKzcAxlKcs5YTa/NByesRacdr9\r\nlm4Pkl0Nl/R6BV4Iv1HIrwZuANWGGoEVEVfssDw0LBrOy9LqzNypN3Ak69by\r\n6537x4JHY8Ios71y4dIv3/aJN9X/GQcaC4gSC7hRwaPj8h6I6XcA0J8EU7Oy\r\nsxTFCBNXG1P2gq8a9rTAqAlwFvnKIwsxAgc=\r\n=9I/y\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.37912e9_1650199859995_0.9765072461755737"},"_hasShrinkwrap":false},"0.0.0-insiders.01edbb6":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.01edbb6","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.2","concurrently":"^5.3.0","live-server":"^1.2.1","postcss":"^8.4.5","tailwindcss":"^3.0.2"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"01edbb6c93ed47c019a9944e9f6c2b4be457f7b4","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.01edbb6","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-dcryhlMHWmoHZiUgQViXMSfBJr306pbu1RX5LqTbxqGe8SksMuD1+Z2lqYf9BY4E36ie3bARLTFOkQKgUZz4og==","shasum":"42017c2857300394811a3e3770ee9e67f652670b","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.01edbb6.tgz","fileCount":11,"unpackedSize":48360,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH9TN90WTKrJFjqUcAwuMJbHn6NhFrhpwxPAtcEsCw4rAiEAtTFKExnQ7rhwQmsIt5AkSA4XU5iqSC5ymrYcsmNw2vQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJib/JeACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp+sg//WiSljqkoyiam8ES28prkle9UwFUjMbreyUSesSkm0BgRrWbK\r\ns1P0WmFjrS6Nusrru5HERqdk7hcO1zSh+ndjxosrdGdofzuDoblJ61oCtNnz\r\nMuHjd2u+QaX7Hx904BRH111CklFGmDy22xuJBRBEJ+7kHn2I5apW6xYTpC/A\r\n+wDVVhfrhPzvNcdmrXDF+uOc2QUZrci1H5gfmK21ZAQoXMyu6f+u1cMwpABF\r\nDzC95ZgmvOuR11S/jV4Dvms8kD7AZbuewFg2fwWMU/1UDTNrJsH/uouSdtFP\r\nFZjOzAbx2lBhn9vpLbLL+DLhYgxZOkUvpHz3R6MBgZedyqzR0sTaxUa8loig\r\nculBM2AU2vYyrmxXrxoUW5Fi5k4TFdoIkkY3fzRdl7McSmhcadzNkAVfaj3Z\r\nj6sBvr/zfQj+bLbI3Nyz24lGJE7Y03U+oC/0BTPb5adLSSx7TlxYAv3ValSb\r\nP4+5lc5hl3RE5qzUGMMSjLI6roJnWYPkXmq8llKsQBKXeot6cv8+bhsl3CAN\r\nd12eJhyGHE74oaQfC7xEjATSvbJ8Qmc6Qt2kQTEgSZQGgN9SPknyZ55FSoCF\r\nculxURiU3N8Vgxwxhfyk4ohz1jtFd01jGYNZ19bZluubW1jXzwFbuXeohaW/\r\nLi05CM47xRbUk+7a99lMPLPaLEHA8v+ov3c=\r\n=WP3u\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.01edbb6_1651503710460_0.19382032452573839"},"_hasShrinkwrap":false},"0.0.0-insiders.203d454":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.203d454","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"203d45409e343d5b421147122db164c710366e6e","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.203d454","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-c+KVyypfZhj1nIYfiDePjBAho5tlW2r3UucGja/Pkrg8V8OsWllgwNDO1bs8RBilPhhEEgH+2jSPjSJTGA5aQA==","shasum":"d4e89802e12a4640f09f65096cb40f2c2abec7e9","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.203d454.tgz","fileCount":11,"unpackedSize":48497,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDFfkwwY5h+BtiBfroHEhBu60p5He440hYuSBJtnerR9wIgZfqNPUavPTtCuI6SMLRtaWY1HiQ1VMMg1D1rQCm0XZk="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJib/OIACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrL5RAAo92qrPNTC+ziJ3b6+i3zFOsIkp2eGXMqvXSblPHzQcrvhEG9\r\nGZ6dthOYBFXr7MSsVuHP7wS45eoWqhdhii6dYWlGFuPA5GZ0Dev4EaszFZq1\r\n7lCSRDDhvSioN358fZUWp2yM3ccp19Pona7kM5dtTf7XwVrC0LfEmN6w900g\r\nSpypTD1sLkssN+4lInRWNBXpm/62VM+hPZhvu1t5aEhqhNXKQKxmncP/yzxO\r\nQ+itHHP+0fpSBvUFTyw7l/BeCa8kScfhAdJcAa2/IDPKGe2x8+S5wORf0/a7\r\n1XasyAt5xcY2/VGC7NT84Aoc2Ur4YeeEAbvtDD+0jr7Vz0IugtYcR3WPLlBO\r\njQJtZ3sAQM06ytvzkpR3uIhqB0qF+z6WE+TaU8eE9hJYh8p0EW5g0XiOkvLf\r\nH9Wok7aD2pL9c8xJPPDxSRe9D/aA9HVjPeVgrwGvHKtwKa8jbriuAGmw2Wkl\r\n+pxFMA8QJ/O+ooG1gYl0Hqjlztd13AtS3/5DV7vwc25PKbvmYEC8PFDRyov/\r\nKfviJfytyMl8TXOpRN5jGoi0G7feNDuT7QnWf27gmq+5axvUQMjwaMoWV5e/\r\noEs/jHDyoFOZIfZh4GCfHMotvN/m5s5WXhmtqTDuNC1j0vehdjm0Xht5W2Y/\r\nk04iPDUSzadfY6rCSBz8qi2O/Bt1JSQB2O0=\r\n=/Yu8\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.203d454_1651504007987_0.12914654443868145"},"_hasShrinkwrap":false},"0.0.0-insiders.7ef7a14":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.7ef7a14","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"7ef7a149d1b11c95253fc9464be29dea7d4aea42","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.7ef7a14","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-nNntPC+D5fqUUyMphsjvfnzTGpHxudPg/5+cII+Xr8ENYYAOCQ050Y3/3kcwrE6qek10J2IQn+610fgdY+hfFg==","shasum":"1f6010260b65c849aa0708d55d84786f3a3a8518","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.7ef7a14.tgz","fileCount":11,"unpackedSize":48635,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEmrcfo3E2YxH8QWpLEKb6HFzSogJy3ny3feVqAASLqXAiEAvi/RpA+HAtmJmhZ4ocMsns/yDVfgwS/HX6liOJJj7cw="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJicYXaACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmraTg/+OJY+VMUCV+DVcDCr/YZzLF0PVyoOl2XRVhkK79aF6Cf/7En7\r\ng46Os+iJyzw4rbfmw4b99BmLMbpI8FNz13SkVV2RZosIEoD+LZhiDcAbsaR9\r\nNpkeDkTpkViCxxAtTNBl1ANmRpcqQXkqRTISnAzGGRuJFOci53aB84xogRGn\r\nDKQ+kknlWi5L8vqfBzGHdwo4f/jAwNG1YSYw45hp6Yp0u2oDTWk/xW2Azk0f\r\n/gYsN++9SCx/k4UKz4fpH+/0L59tGE27qxsJ0qdxRSOJf200LGhkkz9D+1Ev\r\npDF/YS2/gtgY4ncnv95Sasa+cvpq2VEyFRqbFXidBq15GJjolj1j5u+1+IDi\r\ng2fEHkreQCfVRb/GMXQOZnOqwDpG2JIfdf1dPmYqs0bqXW8NO7mgte6fWsU3\r\ngNX8jM62PFgfyeqFUq8bRry6HcZAw+rFfigaVtZGe28C03zfl5YWKa7c/rNp\r\nwwAp1+RFyEzV2RwLCJ0t5M4n9mA7h2XcjTCbauwYE/0ipB4JtIUR6rxszT+7\r\nVpMRmZcf9r+3bEa7mHs1kWGbviX5/bK9uekJ9D0IiGCiERPxky2+I2QMhvAH\r\nu5NkhCzNL+4Z4REfgzCWoLYwGjuYNY78SujSzLSQJgHSliJ6iNGYFQfvPtV5\r\nqZQHsM+TQ+Svyj9kiQNN/ZS5NkaTVE4pCq8=\r\n=aV8B\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.7ef7a14_1651607002160_0.06332379206090866"},"_hasShrinkwrap":false},"0.5.1":{"name":"@tailwindcss/forms","version":"0.5.1","main":"src/index.js","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"0894508eaf2cb694c675bdd408fea10c5382239c","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.5.1","_nodeVersion":"12.22.11","_npmVersion":"6.14.16","dist":{"integrity":"sha512-QSwsFORnC2BAP0lRzQkz1pw+EzIiiPdk4e27vGQjyXkwJPeC7iLIRVndJzf9CJVbcrrIcirb/TfxF3gRTyFEVA==","shasum":"7fe86b9b67e6d91cb902e2d3f4ebe561cc057a13","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.5.1.tgz","fileCount":11,"unpackedSize":48604,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBJXiIFHvbzg05lleHPpk7yzmp9hAkIKlWbM4PL7d9wRAiEAlZvDR/ucOlxXcC/wUvzgh/AeOv/vXOyQwbd+6RtygpE="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJicYX3ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq7HQ/9HJd0hyTmU3si690a9XELXHk0S3g8/haHEjNDI2zhknLz8BCT\r\nwMcJsLYwCgicDzj5J38DPbbFGQ7Cc+7l+hTV0Q+1KNHl2tq//3NKscEIrOpp\r\n61M0/YDmfS6lrGG3+7jIoU7a0jTQs6447g3dxSJ19SOsfUSIgTVSa7w1Ok7c\r\nMA25wf/5D2tlPEAPfMQs+Ul2/YJQ7ZwqIUPUL9Fc6QlwvRSzjUJ+D/Va6HqH\r\n60UpNUfelBURn9nRpyAaMOri1ll+KJQJz0MqI92hl/g1/Thl9wxz7MiUxMUJ\r\nGI7+CwDxbV/Mn2LiR2lF4/3YOSAX5jjAUl//WeQgGYt4wzg2b2BTCSUyoy51\r\nwSgYNQTaRwjPyPix4orcwV5BEW+nTCOUThpCKX47xbHUUx7sF655sXU4Tg0I\r\nsoicM1Nb45Cz4m8hhxd62Ysm+tndYw5k+KBsQDj/I4+UOPYwn2M7SElinyyj\r\nH+5CQbOt8dSHgAwcOHYRmlmmIDpegX4FzvT8i/Vtu+2sTaAktdNd+rKoJ+JF\r\nwjXpeBqcN4KyryHfqqAGGwMEmqt2QmdlimMU4uJgpmGp0XP8ZHnom/GQobev\r\nANT6T7cio412bw4fcDy9vwNa7vToXW4WVlwZdSDVTFOTFptP+AzA79ZVprfK\r\n9k8jjw+mbqibl+8gqAG+KL+34RmDaGYUufo=\r\n=Z3ZE\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"thecrypticace","email":"thecrypticace@gmail.com"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.5.1_1651607031161_0.28209473422614484"},"_hasShrinkwrap":false},"0.0.0-insiders.c763df9":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.c763df9","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"c763df9db417c32bb7febbc8c9a420d9e000964a","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.c763df9","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-GU+ZKshF4DILWCKfeUPtqWoIPtF83K2J4gObudfkrmlRbG+FxE084tT6gfSq3Y2lGUKxduYX3+7a2mXlHr/O3g==","shasum":"21c445ad70f0ec07c2fa1836a990fbffffee1bfc","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.c763df9.tgz","fileCount":12,"unpackedSize":48757,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDxnAvXektWZwiddzpOR7G0QX0xNHS+pXVzepQqMDedggIhAIPhzGxs5g+DRrQT/j82wBBZ5mYnHsgBFrO0TE3iuKo9"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJihPXHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp4PxAAnmvLnMb39lyomKjJf1ZYwBnWmiL1vFlQ/xz+iH5GxKuF7oo8\r\nfmPumpHO0gggzi1nUdAWvoU75nu0u3wV2mVxYBgyIrRMihsQs1Nh74PI9Jwz\r\nmR+YG8kYX4uiDr6K3xukj3uJCwxVbcm3G4EfOIErX7GiphhCCWBJUd1OVnM9\r\nggCGiTjJlaU8QKtCXRwNXdQj8EhtkEbRh7AvwITS7nBvZA4uiUwF5rcaQ06y\r\nDCEaEq9qx6aukCNtbt2CZ/8l1hlPgAYnQ7HrUNJDjYwFGBpdwI3e8Aprfevr\r\nxIsyyk8u0A7PTisqyNeUOAzmPFmW0ajxs/HXE9gG6iPiqgeuYyBfspOlNyPp\r\nMfYuuvm8FPli84+/u/0YyrUKUhc6mig9U5F9dhWFQ1zI74Qd2e9tUc/iWcD5\r\nL60nNO9gKHPuiY7aAC+2Rk/5RcF6JhGxWbGN+S1sWgXhLJUKVugPVAc9xijW\r\nAuYBnWDb2Zfw17ODr68v6YIMaWIVy76x/jgeC+l/b6SVjzNq2ESUVIS7Hgpq\r\nVDVsFcfQ0iv3Bdm6cW2KWr31ayBWfR75qLPg20HXObxY+HnBI/ghxOA0tT/h\r\ntVe15ZS3XCHbOcLPFcdQdhvBgG3PUWIGKjNY7fOC1zHGVaX0s3DgQnhN0aL7\r\nMWxqUjoUgDBIo/Jyus19nJvrmkbN0cHhvXA=\r\n=szRe\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.c763df9_1652880839022_0.35004035681660217"},"_hasShrinkwrap":false},"0.0.0-insiders.471c040":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.471c040","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"471c040e37c4bc7816c70a42984336a1ff322675","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.471c040","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-2ta7IJ0beYNMGhWOCWnDdfoTZFNBJX3mBvEf3ejkakc2SoRYHgHsTil9pgE+BWOqHcCfbvg27tBuxmwB2yc5eA==","shasum":"12cb1e7b808851156d91ed5b8ae221dd70bd2289","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.471c040.tgz","fileCount":12,"unpackedSize":48857,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBQ4nSPhUL0FPtQhPDqgsqrWNg1FWEMwZ52eHhGUQyXnAiEA/oycTegKCCEYELET15cVp8xSJV3wyMDKQNMOa2S40sQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJihPZgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoRthAAl6RdQI4zQmc3WIxkLnGbg4qvt4yZeuIh6C8RZKEySPhE4Ots\r\nCwafjzdEr+5Zwho6L4q1nJVSJ+3JpEkv0elbAkoWzroAIrGWhSrHvmLciemo\r\n4aASZ8UP1JpjX4OCa14J+/r3Rclk3qk5c6xwYSJSTTdJxSvRLlA4uJbE9zPn\r\nQxPqDooKF5sw8270vNuVWlhJ8fABmdrTSGq9nA+DeoOSC86WNTfEOO+udHKl\r\nKqKZnQRsOoW3EXzIc+jufO3uhzv3RRHAWwMPe/CgDxotypBYYAm4HTj7N5Rn\r\nchKl74/X47qRNK1jFQjtjfOCz6qCTQXpkBB0e0hjCDtZ27ygIYv/HWPmGfux\r\nkz6hkwGWZvWP4A1kd1d7SS1uQ/gomgYLQNhDGgRP3XSmz0o6yEj9TXaOx9D4\r\nWDSXRbSjXLtzJ0+9RU+kEGE18t8RkFaH8J6fH6rQhLfm4hkJ23RiBmR2+MrB\r\nEA9zxOd5Nn51A8A2QjKgR9SFtBCcEoK1yCVH+tdHZWiAFZzGqfo2htxvVZLa\r\n+LrYIbrZbXhW6NwppGxUJJJiUhADvlt4f67+1IBteh9QEZZKNuRtcWc0LuHD\r\nojwNoXUUqYoM5X4wXib4MN6ramDhffzIgaEKoNb01hB0DJJCqfyh/bQg1tZD\r\nKpIFpRDoQOo2BiwJpu7P9+ClFimsn4o7IEw=\r\n=zMeg\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.471c040_1652880992331_0.07455322295635547"},"_hasShrinkwrap":false},"0.5.2":{"name":"@tailwindcss/forms","version":"0.5.2","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"19e4dda284de5127951468dead9b50cde09bf42a","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.5.2","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-pSrFeJB6Bg1Mrg9CdQW3+hqZXAKsBrSG9MAfFLKy1pVA4Mb4W7C0k7mEhlmS2Dfo/otxrQOET7NJiJ9RrS563w==","shasum":"4ef45f9916dcb37838cbe7fecdcc4ba7a7c2ab59","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.5.2.tgz","fileCount":12,"unpackedSize":48964,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFisJHw3n6iV79wpH2j6nG8UNvqVWOXIpj8p/VSLrXFqAiBWTRHzIlFEDMxxqMIxAXozwAsmtKz0on9wFAurzJlGiA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJihPgLACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpZmA//ZER8TYvvqT7TCsRZs+mcutX/0od79TJoxr+gOuwFQ16wQeh8\r\njKgTuaCg2cmCC2v2kFdlReV4CvbIZdXNHhRlRbjyQ/fRJqmm2WJRKjWMVm3V\r\n8424lV9SYvz5T25rKWzLEolORwDZ71gbOqvMp5aQCVNUgxDyxPWeugpNStnZ\r\nBPay8WDSlHBOW8irBp3nVwrf6a11jTb7tKNq3UJ+O4bqLMftiGEpkNzIZRoG\r\nsHNLGwzq+RSMYGWVA37n4W193kDRkV70lymQ49HLNi45bfUaCuW4BV74saBF\r\nVO6btGCZ6nEZWcK4aSf/FysuLbe0rNRdatKCudxjXRmlVw7+AFMV3u+o4Lmd\r\nPmDgKOpcsbsp/M22bU70d30LOCVtEIJBSl2GQqqw71USJDkpYG3VD1Z3C5gk\r\nrj+M3OV7OiJU4a843THCWigcHHuBX8JOXzOE/yyNdHIovden94reVwAPWCiK\r\nQQzx+ag6p4o1Gjgbw7ULfu7hGWYk8aFfR4nnY5WHb0K2r6b0+BryE2EF1sM2\r\nIx+DgE8xwA+7yLU9BAWT0ONoBIlppNAgAMcxKjiwWLVkIXCWFWigyYB0CI2b\r\nS1FaXBWPF8GjFzXs8z7GbBFDRY2XsXDQIxymEDOD4O4CpOQtyNYeJLipeLBW\r\nksusWquqMh4mbDZVSv6VREb7ceF+1SOSsts=\r\n=m+lu\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"malfaitrobin","email":"malfait.robin@gmail.com"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.5.2_1652881419425_0.1063094748379716"},"_hasShrinkwrap":false},"0.0.0-insiders.19e4dda":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.19e4dda","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"19e4dda284de5127951468dead9b50cde09bf42a","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.19e4dda","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-JsztOKGRZ6ehmwhlUNeRKPk4ED0PxxdcunFAYpAcxBzXAfashEfeY7LSnmDvK/OHJ+chsAQNZ+3Uxj4EhQad+w==","shasum":"7f2648e929fe4540d14e746c2004ffd5e62d3832","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.19e4dda.tgz","fileCount":12,"unpackedSize":48981,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD24JC005PDZklyvOZ9vM0xFDh0nf+aKDv3u5DNUTYsYQIgbiMg0VlOmZEhnrl4MuSHae8UUtYxDJTJ6SLnVr8gnOY="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJihPgTACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoZ0g/8DjMeXvQ7ZG0FOhFEuzFvSPDY5fQLMys83W2X43r1aOZCb/Ic\r\n0NDLXvftv/G0iYnmlLFQWuwLiYhK2jxLfJZlxBMYxhMrsvn8KWQdNtuLvrvd\r\n69NUtBLG/tH36U6uL7WqcHdFIsxSeofGHd4YOTBfm2cU8ckzLxUWvuZ7s5ze\r\nCGUlDXUIWRrhM2E/vb25V7qx5HkmwQEtV4tvCjJW+8kDeL6V7ISsYmgfGjz4\r\nmooRdiQo6dtEFpIYc6ZfoIT471HU8ZjkmqD+Q1Q3K3kvw0+SbisRu6VrvOgX\r\nm084B9zYyt0ht61h6LVrkNC68/oP+JqaBjZW4HjhkSWYfmVLvRHkrli7RF7U\r\nVXbBGy7PJOUvWT+HBjyvCWbW7VwYmnyRkaRej3Ove8l+vTON1K0Op4UuLtSn\r\nwVqw24Jci+435kec1acOGQgln9BATJGrh4/7+w4qG2bCLj8o4Oo6mfBkVm20\r\nXCs3TpuVDvXRLxKhlmZAk3J2oKTr0HUclJovVskBnXXiMHrLYFHPk0EdHj/A\r\nJMKRvNh/1S0QFYsuA/A+eokclvcUP+etyeRg0ryCj/5omOIO0RyYHvvXHWG3\r\nujxkTUJhuANl793C1UhgPeeqghrgsQmzlRwSZMvhfW0foVn9RM7SvXEON9Ph\r\nhWMBXDVXP198LK2GwOMP+MXXwteFigfVQeI=\r\n=QfyV\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.19e4dda_1652881426890_0.8267263407085772"},"_hasShrinkwrap":false},"0.0.0-insiders.ac7f9a7":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.ac7f9a7","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"ac7f9a76a41fd5217b38a00dac78a5a490399677","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.ac7f9a7","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-rIPxK8lYyR47wlREbU5A7rW/OhBB1M8oNTF+lsECDE6Sy52ViRIGfgqtrbCHxVONeMTGZUmQQeERziFk1DIU0Q==","shasum":"71a5f2144db97ea9e77a7aecaa8d917241f25621","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.ac7f9a7.tgz","fileCount":12,"unpackedSize":49160,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD4cNzZcFEE9sOkvs+Q3WrF97cCAEWYyilMW8tBX8FJEwIhAMYrxbH3BkmW6vb3pwJHvJ36eTC/+WbKBUcu1nz1+olL"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjEewpACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoDOw//eAchTEuh/p/LPPIQN65/a+0tIOPbFcU1IHoRx6Fy32wg0cZG\r\nMgpqhI2mCFRbDaAdn4pNNdHvkmAO7jihti3Kfyh1/PymdR5MUpPaqx53PB0y\r\nluGUHyJPNbd8pfeGBGkiB8DMpOa41UtNy+qjruQiCFjmfVaIDlWfIv/0R5Aj\r\nOMV6TkML2VFBysUPpaTbJdw06KY9+93dCTpWGiONiCkd8MY4+g/wkSZWYzbT\r\n9MLRO6wqww8Ksnh4dIco6Stb5BUK0vAkjzD05igj8g0vBJIlyPFvDCeKRfMU\r\njpkGQvbqY5qAUP+TSDriQaSqDAc3hxQ/xviB+IAxR6ODh+q52JQYi88AirzZ\r\niyzStiB0huaga6T7cTH+mp6Rzb8YM47JebiTSnshqlPAhcp4mqbKn1RLE8pG\r\nK3VHUR7Oci6w70sXcePpcF88fvqZYCZwF+BV7CfcWhkqzxGcKsiLnwAHE7Db\r\ndbx+CBZ0eADumDKlAdQNBah0Outp7hwlQdykgWQ4EJC6JWcr+itUWud6VRd2\r\nehwSqxVDN6Pg8Gky5hFdSJKljskL4HdaAC9lnqYuxPfbTzJOHDMAG+Ge1rni\r\nbHNLeHErn4Ca8S0vyKXgtGN6nfyrpM7M9Pe6Rx38NhVMM4z7eQwMPiKc7QnS\r\n0HpAFWK8+6nhg9udjPHG1sIuLMOm3d8oPPo=\r\n=er+r\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.ac7f9a7_1662118953560_0.7182019036589751"},"_hasShrinkwrap":false},"0.0.0-insiders.c056ccf":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.c056ccf","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"c056ccf480e316ebc0201c080cecee8a306b6b46","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.c056ccf","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-cREZh8MdCSEvLlnKhl+1EnMBi6ux4wOiRabRbjgo2woRvd6xWFuMGD8c1p3xJS23QIU4WmNAL3R68KMNCewwlA==","shasum":"e1c59c269e0ddc2ef81fae85115b1531c4ec895c","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.c056ccf.tgz","fileCount":12,"unpackedSize":49284,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEWAkG54ObD3a9eXRl3wKTSvywyYpMSgrTTNf+RBrDYBAiA38i4x6G+38WF/P8faPCMRC4Cig2bqvpYETRGvEgLHmQ=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjEeyrACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqZwhAAjh7XdL6k+r1DA/wiDJHbIMqEml95hAVTZjUQiqABN+85URwY\r\n7tAzIFd/gGQUS+ejFAUkrC2lp3bIeCI+AwowI6k7u3FRs5imyXA1q4IdLYme\r\naRDXph+E24JXnvc0H0RJAEsgj9mGE3/3YHy05prGm2uK8zPjN8e9/s22/6+O\r\n5m1WGP9zC+rxl3iPqHVpSfyrPnSniW2Wpz5hVjOaHBF4RSg/E6H9GL7U0VkQ\r\nnCNyAgDGGPsFblDhZWwpJU23Kv65kxfoWXgk+FAQ0U+uEVO+RHi4gcx/VkZ1\r\nfwX8O7yG5C7Q4a6VD/xEgqAbsgr/YiPM4bZGCZxcsQx62eB4EZwxXNLnFRQy\r\nnrU6ZT2Z5nUfdmEowNLqjfM/wKGJAc3CmT6BOMRJBSwbrr2BdQmgKf3m3tN3\r\nhUqqQMS82Hqc+HJt54uoyLp+yOjTOz/3qJJk6w++Wclr4zuQF/8dmVdNS+lY\r\neQIjENlyBxNWJFZWPeqlOMKYMNYcT3p2JvlwkU5y2vXS9lLaGemYgaMOHS6O\r\nUl+Ak30+wgxLTdYnnfTX8bkrB+wz4Bkjahot2WqfiFDAKU5/0hL5xgFgBoy8\r\nzLFotIPCvCDFMxfNHi5GFqg7DQGS0UAhZPhWI85oqYtWqN0ja1CkS6Yg+RmM\r\n6PZ1Wpat1X1LyFzgqwF1C2jIi7dAva3SWFc=\r\n=a2wd\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.c056ccf_1662119082880_0.8790899023331717"},"_hasShrinkwrap":false},"0.0.0-insiders.b3ed157":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.b3ed157","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"b3ed1576aa886bdca96b6d7c6d8ab3bf7ea5e7d5","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.b3ed157","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-nm3WbrC/VR+gbVcaQj8MjohwTHznJMhMX7WRpFjQ8V0I8LOyBI5AT8I7t4sS2JeYyKh8SBYYGqdin1YEytqNFw==","shasum":"cc3db80b47504d0d6836cd8350716132794e0179","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.b3ed157.tgz","fileCount":12,"unpackedSize":49284,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDEtg7pOpuTdDCH1PWFi9u6ZYnjafAFYrHEc8mzbrLilAIhAPDhTFXvwORvFjdFDJ02CQoFCmje8dlX88M1rD8gbPCX"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjEey7ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqRSg/9GKh6xmQObrj1yVNmpVR8e3gzIDsPyq9HKfXCDtvdSRYLNGNT\r\nUI7QysB3npwQftJmNq7GexIMcCubGfdqjndpnql4Ojj1juqm4NqgDxNgxnfC\r\nK9VTJmRNqaORHoN3XcQ+2uKZMDb8oJgCU9yHxUIgbgLtWJYSdpIgXHFXNTEX\r\n87zt6PPTl1eZsC7g7Shzd1Drseuw5xt9qMYSjVRUeUeo9GNXSCk3egsWjiDw\r\nFMNpTeSwQcbypGRXnFLprr76KREGVJBMccwFMDUUPK3y4mw4IKO/VCdU9A8m\r\n2PNNHUmxrTOKygMuTJzVrWq2HuSQfUmMJR6MSZYpY23vitNRewtjDDF6rjCw\r\nwwML1L7Y+xL9F1ZrL3SgxIxFrwESuqzqnqTZsoZGq5ar2GoKZ15Crk867m8f\r\nQLIp5UImLd/sLZig8BOgMwe7LaQzyMjc9Ts7hs/yciWFBccCJSbQLxhcLAZb\r\nUkDBySItxwS9d/vD36wQtJ3Hrp3ypKhRV/uwkW/+AMk7SIPYWmyCOmKoLA3x\r\nb95Y2FsXPuTFRYQfftm4XlWDJ9F1PC9gtn+sS7TvZGnxPs3gaMPnAQ2zNt5d\r\niCMB81pa8qIYbTuk+4AnWowXmV4uK+gQlI9BaP8Yes2XtdRvXAIfhDW/e0Em\r\n3uR1wg8MXR8KimAc87o1WGwhKnKOBHXA4Q4=\r\n=iuHG\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.b3ed157_1662119099068_0.23713656858293208"},"_hasShrinkwrap":false},"0.5.3":{"name":"@tailwindcss/forms","version":"0.5.3","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"b3ed1576aa886bdca96b6d7c6d8ab3bf7ea5e7d5","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.5.3","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-y5mb86JUoiUgBjY/o6FJSFZSEttfb3Q5gllE4xoKjAAD+vBrnIhE4dViwUuow3va8mpH4s9jyUbUbrRGoRdc2Q==","shasum":"e4d7989686cbcaf416c53f1523df5225332a86e7","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.5.3.tgz","fileCount":12,"unpackedSize":49267,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQClEJyqNoxcuQj45FhMQBs01b4w4t04zJ1hM62E4RPeRgIhAIsNAZr/wTRPwvnKzE3XG8HnnSuX2/sQRQxHzkAhL5iQ"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjEezjACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoTLw/+Lu4iWyE8qIA9kFxWltZDlszb3ZVZYqIgL3LH3OAl5IEUTBOm\r\ng4WGByXSGn1y53+i7/2cewUeepTzXemiYOEJb6YD/SHZRfomyaZdr9tCdjbT\r\n7x0q70gLQarPO9WNYmE7fR6mGVYzMg+ImugB0+U0iORLxyj23QMnj8KqBljN\r\nkXcYDHh4WQcf0gu0ndvcPSE8Mt0DYZzfDXbpcxnhAPLvFUPLb1x4zL3sBf4M\r\nHvG/wbizaNT3Se5RaNlb7bvkXOPZ/OdyWUc0ePeCoC3cPES8dUpUyhsNXy8+\r\nX7WwJHznvc+qUO3mobQba+DGhIyUso0RfLEH2oYfHxSD2Fx2zvoEVIxlNgzC\r\nVw9YoWJHM3kNTyOWd4ZEpAWAakiODuXsS3mmCHXI0VrtEWGvRdzsgUSFoo+k\r\nVu2Tv4S2yn0Gouw2gTMN1PPBpWEYU0fII117MPI6QMpfbGhaCUGXpYVN2hhb\r\nH6xAWOc+CoxOkOIL8YVxeJ7mqO3HoHuV/ko8nzTCSeldc3KpLjgLImkVFez1\r\nfG7KXTSlC2Fk3pXSd0MaP99hNf8whdFqymMk+dNRvaUfprYrxl1Z8hOdtQpb\r\ngOJatimQTdIsIEQxZ2bM1Z09zHiG3Pe/q/8ZYf4Y2VBhJ1cY30IPW9iNO621\r\npCiZTPMcwkXIaYeV/6+Z989wwgBT0csbqi0=\r\n=vE7h\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"bradlc","email":"bradlc41@gmail.com"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.5.3_1662119139730_0.5539431060967921"},"_hasShrinkwrap":false},"0.0.0-insiders.615a228":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.615a228","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"615a228c4893002ddf93ef5334b1bdca42af47c5","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.615a228","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-3nWtJhKLgZcDloCwrjmIvNOKMnPp5yuSz/KBvN3qHjuI3CHiTylB3zYD56BSl4/0OuPJF4snFZc/45To6t3xGQ==","shasum":"f9c3f61f8b9d5c73aa9327fabf20f6d5917c6f26","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.615a228.tgz","fileCount":12,"unpackedSize":49893,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCMRK+/T/ecR4dH3HXyh0V/yjrTDh2EvtQ7zyH2xm6miwIgBlMgDz2R0rQBSAON2aOcHR0Sy8gGqdKznQEdIzl6k1Y="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjtBcgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoWew//Tv3664Oz6saAeEB7jcQvxenHbw2TuYwycvunRV22hgOERq+S\r\nzUNRDu0kr0sTUt94YQffcXOp1LQWf2q25lnOUWiJLCEFvOafi5IIAiw20PZz\r\nuyIAi8oHYSJKj70X362oueZA/iYWh1Sa5VZTDlRBR7fm0rU5oqOaA4CXoZZc\r\n/WikGP87CYxbRK4UMnuK5wISfoTCXp2/e2FOshOI4zpedxpxhOBIiHQY9Uow\r\ny1A2tVEKtqJH5dxDIp9AjmFhF/MCoUu4XCAArskTJWrTq0F1Hj4Wl7uTwtiR\r\nkcPnI+YaLVoXDMvmhXNuvbCpKzjooB+ffkTQc5Oh5hnBKYsHdsjtHjpqZxO9\r\nl2ORiWkhWmyphkss4L3ZslM3/Ms94CQgwRbcz45wFkq/GUG8eDu0hteb0Lxm\r\n4ZX6RqNQdOU2x7fAcYDcjvIoDRhEPEDQ1DgAtuHDXjTPWQXjFL5Cj7/CN3ps\r\nmYYkIvBY+yLB+pYBiW4/EPUr0lk3Vp0k1f/1yNrXWRc7Hd7tJmikYGzPMdFH\r\ntzLdZldxL1FEcw72ell/cMXHnRZ0WtdK63jmSBuZJppEhhQjSpSp6aGqVsE4\r\nq3iqowJxanc/VqVCqmTAehEwHlNL97DXIikIQtoN5LTvrRPyOEueikvQe6Bk\r\n+6Lifaw23XvW+LFTZ/b7zzvduM92nULnXf4=\r\n=HVE0\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.615a228_1672746784131_0.0415349070557105"},"_hasShrinkwrap":false},"0.0.0-insiders.73d5b01":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.73d5b01","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\n**Note that for text inputs, you must add the `type=\"text\"` attribute for these styles to take effect.** This is a necessary trade-off to avoid relying on the overly greedy `input` selector and unintentionally styling elements we don't have solutions for yet, like `input[type=\"range\"]` for example.\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"73d5b012bb44ddb5449a30fbee910767975022ce","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.73d5b01","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-/PURgvh2BjuVtpwHsLuO3z1mIkugVlVSkFEoJM2RMZHr+HS07freBRw3lxGBy/N5q66Jfm+fnZHgvji5XeySiQ==","shasum":"351c16e178aae36b43f0b403bbe08d777f0c0ecc","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.73d5b01.tgz","fileCount":12,"unpackedSize":50979,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBFBOz7AQNTJlSX1bJ6Rgzu7kVqzAda7sz6PJM5vlPMHAiBNGy3K2j9yu47B2IA3+qJrHhnvZaNZXPKusIVuVZhFVw=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.73d5b01_1683907495422_0.418072914390881"},"_hasShrinkwrap":false},"0.0.0-insiders.c846b72":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.c846b72","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"c846b7249a8a7a3b754f6beee62981b58b7866df","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.c846b72","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-Xew472C/qwsHu9wRcDwBF1lZoUB8bHKRZvvqqJ5EiHxCthBuLFf0g3rI43TB/7Y+2sS72K8mAzVFfGSOIgsTQg==","shasum":"ddcaee92b6487aea90ce26d53914c20a34e6ac6d","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.c846b72.tgz","fileCount":12,"unpackedSize":50717,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCe821+Oo/NugMj+plB7kLJO6hItxJG4T88IaKtu0cYtwIhAL6fk6UjLBONVoaR+VtvesY6hIuSnJvXIlIpJR5PUZSN"}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.c846b72_1689261093795_0.8091204898880175"},"_hasShrinkwrap":false},"0.0.0-insiders.c2e2c07":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.c2e2c07","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"c2e2c07c7e357a86de4990c9e6bbf990cf17e184","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.c2e2c07","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-j1+GZsbOdNCKMITRirQys4qdCshygOcA8Bk1TsdWbgpFWXxRwLoiq8cdWn7oIXYAwFkqApJTLjiKz4TWyQt5qQ==","shasum":"9d4977db33a8144d6c4f846e9698de16f0b02867","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.c2e2c07.tgz","fileCount":12,"unpackedSize":50821,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCgb2q9h7Bnlq4lZFdghFlhr+6/Lo6/51GAWq5QsftjuwIgCEbeicchpGnZ9BHV7rFn/UcLXkTXZDsOsDr6Y37ykxI="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.c2e2c07_1689265986723_0.892613633739556"},"_hasShrinkwrap":false},"0.5.4":{"name":"@tailwindcss/forms","version":"0.5.4","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"e60d81afe6526a015e8f38023f454b4d27c9859b","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.5.4","_nodeVersion":"18.12.1","_npmVersion":"8.19.2","dist":{"integrity":"sha512-YAm12D3R7/9Mh4jFbYSMnsd6jG++8KxogWgqs7hbdo/86aWjjlIEvL7+QYdVELmAI0InXTpZqFIg5e7aDVWI2Q==","shasum":"5316a782fd95369eb5b6fd01d46323b3dce656a2","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.5.4.tgz","fileCount":13,"unpackedSize":76391,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEe5tNrU6jTDHRxuAbRxP3rUQaIy3ebspdmaIPQNqVT8AiEAhm1Y6PxTTugshcRhyoLhqy7J+tOO1EKjyHnRorQygqE="}]},"_npmUser":{"name":"thecrypticace","email":"thecrypticace@gmail.com"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.5.4_1689266011482_0.544205000643299"},"_hasShrinkwrap":false},"0.0.0-insiders.e60d81a":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.e60d81a","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"e60d81afe6526a015e8f38023f454b4d27c9859b","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.e60d81a","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-ei8qg30Z+IqxmJwb27U9vFtUlt6BacncXuVzFMpnxbLJWbhvQgs1RuJRg1Sd7kHvt+hUqTPecutzalSfQslYEQ==","shasum":"2a022139b251336f842b4ef1d6502a03eaba0c09","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.e60d81a.tgz","fileCount":12,"unpackedSize":50945,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFIGqAAl88TwSKaLVAEbSbqa3cxTG/iBIO/k5I9AzRvOAiA2hhZGmsgKU0YafpOsWpAtqlD4oEhudYfzSUJIYTwCiQ=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.e60d81a_1689266017953_0.6648757036622788"},"_hasShrinkwrap":false},"0.0.0-insiders.5a13e94":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.5a13e94","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"5a13e94996a241c4fb06d8c35dd8dc1dffa4f07a","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.5a13e94","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-EpBwNpKbm/S7g7bqe1N/Hqkf/nnY+rhZydOgoFg35FU9gN0lqO7gCjAjjvveVNY+tXXjHOmiDzYw8SjHhDHfNw==","shasum":"f4f0263e385eb8f0379faf636cb65c57f63c4017","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.5a13e94.tgz","fileCount":12,"unpackedSize":51527,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDEwJFd8X/Xu/M6ex0yGl//3rqn1SX/iL0bTodqrHWV9wIgODOn816V5hLHg7z5YKStmKxpBvSkoqNL61QkgW3xBs0="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.5a13e94_1692736070824_0.49951527735092704"},"_hasShrinkwrap":false},"0.0.0-insiders.31ba684":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.31ba684","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"31ba6849a132978e3555940f183cb9a37e0906cf","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.31ba684","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-QWYUZ/fSAXRE0tbs9HV//8hIk9Au+k/0j6Q4CF48NYYINCLbecqr7MyXJ8djmuR8pbsfgllKOzP7s4d+i2PB8w==","shasum":"ce83a5f1d388f7bd8a6d227b2a1fedea46f504d7","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.31ba684.tgz","fileCount":12,"unpackedSize":51633,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCOOi1uDjTyZEf2WBSgsCtCWxIl/9xLZl3KJQrxrSkuYQIgfuOhGZwStU7sdBxljm0VWd1rbmPLPKBoKlOhc/UGbt4="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.31ba684_1692736098465_0.4671303483642508"},"_hasShrinkwrap":false},"0.0.0-insiders.199b00d":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.199b00d","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"199b00d4f41d882d74976c6e0fc5c1c50cba8a6b","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.199b00d","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-MEsofGS+4XXRp9EvD9m1uBign0WLM5QTwt7zIqhpOfz42M/PGpVkjtpbOQgeEWgTS7PheP9qIRmlugiWxwcAOA==","shasum":"ead5a08053ad7d153ad0b1e35e9b5c9726032b5b","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.199b00d.tgz","fileCount":12,"unpackedSize":51644,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD8Wx5OiMZPx7I8IfUj9rNa1sqZNZbIrEB4tTHW2c3LMAIgSCqnGwdgnKapxOX5/F9z5DgqU35OE42RpZaZJ3SeRDo="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.199b00d_1692736261175_0.15250827764371944"},"_hasShrinkwrap":false},"0.0.0-insiders.9b7356c":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.9b7356c","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"9b7356c7f16057d8d01f43f7be1c7f12e3d95be6","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.9b7356c","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-ELaAW7R2Xoz2WHA/3M7w4CwH55aCz+4FJqd2OLsxwqOyMPAnUS6iVZb3iUZX058K6RRqBZAiEa1Anp+3iX+uLQ==","shasum":"31db852aec698ef593ad8b634e853eb69c87da71","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.9b7356c.tgz","fileCount":12,"unpackedSize":51768,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBhNN7WY0FlzCUVVD1GouSPc6Yfzz+RAaBkLPzRV7O1BAiAymb+PKspfjYYqUD2Wpd1iGfYMWCRr5vJhjDswTgVbLw=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.9b7356c_1692736289185_0.9572527836616451"},"_hasShrinkwrap":false},"0.5.5":{"name":"@tailwindcss/forms","version":"0.5.5","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"9b7356c7f16057d8d01f43f7be1c7f12e3d95be6","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.5.5","_nodeVersion":"18.12.1","_npmVersion":"8.19.2","dist":{"integrity":"sha512-03sXK1DcPt44GZ0Yg6AcAfQln89IKdbE79g2OwoKqBm1ukaadLO2AH3EiB3mXHeQnxa3tzm7eE0x7INXSjbuug==","shasum":"2965ee74159a16b5ef012d5eddae20c9b48aa49c","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.5.5.tgz","fileCount":13,"unpackedSize":77319,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFr99tS3nLf8V4t1evlJFrwyxr/uPVSxBWbQbYeRcD2MAiEA8cUSY7+IMhcmLnk8BGrp5R/f1p5SDYwK3aJD9on9Y/U="}]},"_npmUser":{"name":"thecrypticace","email":"thecrypticace@gmail.com"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.5.5_1692736363980_0.14854873589487272"},"_hasShrinkwrap":false},"0.0.0-insiders.350b931":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.350b931","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"350b9316f6558232c09fbe416500d8f3f2b02f4c","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.350b931","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-N+HMbKwGOTiEnTrfHms8ZwzL1h2iAG0e6gndfBQof6lwLOIU8+1kqXK6z/ipQSc6fJFKDzTOT2zZd4mTIVKKGg==","shasum":"8bdc769fc4485b5d4bedbc1e82041624b5373133","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.350b931.tgz","fileCount":12,"unpackedSize":48922,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC3iBwgjRD6zFQMQNzlECHaX4tx/JMQ+dU1CtLH5WjhIgIgXdrV8LsGrpmakdOCxJhQr6SxTkT05fvtt5E8cWqqliU="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.350b931_1692971981828_0.4350120092841001"},"_hasShrinkwrap":false},"0.0.0-insiders.d74d454":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.d74d454","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"d74d4542a13022af1fc1337b013d18ff5b989d27","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.d74d454","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-gSZFQW4GUHf7SF3S9puPXar/REN7NbW2t9MR9hfWxpj2WD4aNEJXZ46NFkZJtuUcgTOGFjjVkQZ8G4/wH/Zkmw==","shasum":"149e26d899855dd2b615e3ad02adf0c8bfe7f117","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.d74d454.tgz","fileCount":12,"unpackedSize":48934,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFGh29d5y06siVH2LvScojBNKP+ZD3lD+QwWqoGueE94AiEA2y+UV8MaBrKtNDsNQo76zkp9d3qlskVYRDSOoIbrvhc="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.d74d454_1692972133217_0.9404044691940343"},"_hasShrinkwrap":false},"0.0.0-insiders.c1c4286":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.c1c4286","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"c1c4286d918aa20f439ab4f58ea8d70037052a06","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.c1c4286","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-ylUlLbEMwNr5dy+BMWbGEcmtUT3OD5gqrSriqRltI3qC9oqxAj2dG2d9ULox8/Jp0BdrWIgSvr38jV3vGqY2xQ==","shasum":"a10c64fbaad44b2916f7495414202a9c3578c329","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.c1c4286.tgz","fileCount":12,"unpackedSize":49539,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAN0EbpGiivmvK5Iuo2rGeTnHRtMeS9G/1JLlsrDdXttAiEAjzjqAuKtiBT1yqT2G5NLXNjHlm4q+dM+YfEslMU4QIg="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.c1c4286_1693255058025_0.8940040768007191"},"_hasShrinkwrap":false},"0.0.0-insiders.ad3f056":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.ad3f056","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"ad3f0564c010bf94cef9f352350a7518729b4102","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.ad3f056","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-KJa5tWwwwZyU3N8RepiP8ZZPyARnyph8qBoGRc6dfiiTPGWfDvVT6xA34lie5BkbLwlUvZg1JG0XQNp3LMp2Cg==","shasum":"ae8503d7780da0ef37e2c532dc8dff1bdefe0413","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.ad3f056.tgz","fileCount":12,"unpackedSize":49663,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH02cRzRfdiP3V4HwkBRI8evhNjCxHkC3vDaWjmnLFtyAiBQUhLW5msVoOKIAHKXQSpfr80TEr6cxIQ27X2WnxIZ4g=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.ad3f056_1693255239141_0.2553436648760874"},"_hasShrinkwrap":false},"0.5.6":{"name":"@tailwindcss/forms","version":"0.5.6","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"ad3f0564c010bf94cef9f352350a7518729b4102","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.5.6","_nodeVersion":"18.12.1","_npmVersion":"8.19.2","dist":{"integrity":"sha512-Fw+2BJ0tmAwK/w01tEFL5TiaJBX1NLT1/YbWgvm7ws3Qcn11kiXxzNTEQDMs5V3mQemhB56l3u0i9dwdzSQldA==","shasum":"29c6c2b032b363e0c5110efed1499867f6d7e868","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.5.6.tgz","fileCount":12,"unpackedSize":49646,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC6ZtI5rfFEWKINlJxpgwlhr0xjldXahHqsHgSU9eudzwIgQ810WhiuaAtC0gTdrR8NfbblWWksHd23mWBuLRhtnLY="}]},"_npmUser":{"name":"thecrypticace","email":"thecrypticace@gmail.com"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.5.6_1693255297357_0.24285979118863987"},"_hasShrinkwrap":false},"0.0.0-insiders.8d2b06f":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.8d2b06f","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"8d2b06fd85841353b3d5a746510614c3ecbd8d67","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.8d2b06f","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-xdMytj9TPVp7Ppk4AUvL2yw+4/zbWaL8VYAzLHqfyGk+485PsU9fJ5f4mdWowXiztveKirwf4jn2Xbt50z9vWQ==","shasum":"b2fab850473f12198dea763a7d2787b18d663fd0","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.8d2b06f.tgz","fileCount":12,"unpackedSize":50078,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGwWt3f32ApJsxTaEGL2VaMOqtDulkTWnC2KWGlEoT80AiEA7XbkWwyNqOdQnepCkjZXvAHWVN3X2UlblhEQalYeR2Q="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.8d2b06f_1699644390824_0.6688551015901576"},"_hasShrinkwrap":false},"0.0.0-insiders.e6bcd1f":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.e6bcd1f","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"e6bcd1ff718ad2d0380a65ded0564369e4cbda32","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.e6bcd1f","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-hJF5C4bXodYik5zeeavxamvsgEWIYFqkCz8fs6B6YzlYGxdk4BgMyoCVZeEp2Ye8RhkPASoaTVzBSUEHqBmkEA==","shasum":"1c81ebe5765ad6ab38f0e966ef6a69c86d9da6bd","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.e6bcd1f.tgz","fileCount":12,"unpackedSize":50202,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICsEEl8/eRzFg7LDRxJ9JaAHqVUV7bP2qYaYoUW4gOw8AiB+Jqnxmys1TBB2yo8x/qhyb4ZWS9u8iLmcPdYhqkEWoQ=="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.e6bcd1f_1699644513239_0.48963016293466777"},"_hasShrinkwrap":false},"0.5.7":{"name":"@tailwindcss/forms","version":"0.5.7","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"gitHead":"e6bcd1ff718ad2d0380a65ded0564369e4cbda32","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.5.7","_nodeVersion":"18.12.1","_npmVersion":"8.19.2","dist":{"integrity":"sha512-QE7X69iQI+ZXwldE+rzasvbJiyV/ju1FGHH0Qn2W3FKbuYtqp8LKcy6iSw79fVUT5/Vvf+0XgLCeYVG+UV6hOw==","shasum":"db5421f062a757b5f828bc9286ba626c6685e821","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.5.7.tgz","fileCount":12,"unpackedSize":50185,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCSO+3hqYA3JJ6dcG30ELUi8HzPUGi32+ooGY1uReXXdwIgeB7ucLVTwfgzrUF0RbqkZedX3Z0x/UBHSi1fXhE6YVI="}]},"_npmUser":{"name":"thecrypticace","email":"thecrypticace@gmail.com"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"bradlc","email":"bradlc41@gmail.com"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.5.7_1699645339139_0.03639124992176623"},"_hasShrinkwrap":false},"0.0.0-insiders.c9d9da3":{"name":"@tailwindcss/forms","version":"0.0.0-insiders.c9d9da3","main":"src/index.js","types":"src/index.d.ts","license":"MIT","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"publishConfig":{"access":"public"},"prettier":{"printWidth":100,"semi":false,"singleQuote":true,"trailingComma":"es5"},"scripts":{"dev":"concurrently \"npm run serve\" \"npm run watch\"","serve":"live-server .","watch":"npm run build -- -w","build":"tailwindcss -o dist/tailwind.css"},"peerDependencies":{"tailwindcss":">=3.0.0 || >= 3.0.0-alpha.1"},"devDependencies":{"autoprefixer":"^10.4.6","concurrently":"^5.3.0","live-server":"^1.2.2","postcss":"^8.4.13","tailwindcss":"^3.0.24"},"dependencies":{"mini-svg-data-uri":"^1.2.3"},"readme":"# @tailwindcss/forms\n\nA plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.\n\n## Installation\n\nInstall the plugin from npm:\n\n```sh\nnpm install -D @tailwindcss/forms\n```\n\nThen add the plugin to your `tailwind.config.js` file:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    // ...\n  ],\n}\n```\n\n## Basic usage\n\n[**View the live demo**](https://tailwindcss-forms.vercel.app/)\n\nAll of the basic form elements you use will now have some simple default styles that are easy to override with utilities.\n\nCurrently we add basic utility-friendly form styles for the following form element types:\n\n- `input[type='text']`\n- `input[type='password']`\n- `input[type='email']`\n- `input[type='number']`\n- `input[type='url']`\n- `input[type='date']`\n- `input[type='datetime-local']`\n- `input[type='month']`\n- `input[type='week']`\n- `input[type='time']`\n- `input[type='search']`\n- `input[type='tel']`\n- `input[type='checkbox']`\n- `input[type='radio']`\n- `select`\n- `select[multiple]`\n- `textarea`\n\nEvery element has been normalized/reset to a simple visually consistent style that is easy to customize with utilities, even elements like `<select>` or `<input type=\"checkbox\">` that normally need to be reset with `appearance: none` and customized using custom CSS:\n\n```html\n<!-- You can actually customize padding on a select element now: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\nMore customization examples and best practices coming soon.\n\n### Using classes to style\n\nIn addition to the global styles, we also generate a set of corresponding classes which can be used to explicitly apply the form styles to an element. This can be useful in situations where you need to make a non-form element, such as a `<div>`, look like a form element.\n\n```html\n<input type=\"email\" class=\"form-input px-4 py-3 rounded-full\">\n\n<select class=\"form-select px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<input type=\"checkbox\" class=\"form-checkbox rounded text-pink-500\" />\n```\n\nHere is a complete table of the provided `form-*` classes for reference:\n\n| Base                      | Class              |\n| ------------------------- | ------------------ |\n| `[type='text']`           | `form-input`       |\n| `[type='email']`          | `form-input`       |\n| `[type='url']`            | `form-input`       |\n| `[type='password']`       | `form-input`       |\n| `[type='number']`         | `form-input`       |\n| `[type='date']`           | `form-input`       |\n| `[type='datetime-local']` | `form-input`       |\n| `[type='month']`          | `form-input`       |\n| `[type='search']`         | `form-input`       |\n| `[type='tel']`            | `form-input`       |\n| `[type='time']`           | `form-input`       |\n| `[type='week']`           | `form-input`       |\n| `textarea`                | `form-textarea`    |\n| `select`                  | `form-select`      |\n| `select[multiple]`        | `form-multiselect` |\n| `[type='checkbox']`       | `form-checkbox`    |\n| `[type='radio']`          | `form-radio`       |\n\n### Using only global styles or only classes\n\nAlthough we recommend thinking of this plugin as a \"form reset\" rather than a collection of form component styles, in some cases our default approach may be too heavy-handed, especially when integrating this plugin into existing projects.\n\nIf generating both the global (base) styles and classes doesn't work well with your project, you can use the `strategy` option to limit the plugin to just one of these approaches.\n\n```js\n// tailwind.config.js\nplugins: [\n  require(\"@tailwindcss/forms\")({\n    strategy: 'base', // only generate global styles\n    strategy: 'class', // only generate classes\n  }),\n],\n```\n\nWhen using the `base` strategy, form elements are styled globally, and no `form-{name}` classes are generated.\n\nWhen using the `class` strategy, form elements are not styled globally, and instead must be styled using the generated `form-{name}` classes.\n","readmeFilename":"README.md","gitHead":"c9d9da3e010b194a1f0e9c36fbd98c83e4762840","description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","_id":"@tailwindcss/forms@0.0.0-insiders.c9d9da3","_nodeVersion":"12.22.12","_npmVersion":"6.14.16","dist":{"integrity":"sha512-YJvH0bbMroEZT0AEuVC8B71KklJZxk1+mn/KEKWVfBB0vT3yL3HZXtAemtstzlCDPdjOE81HdrFhoJtWTmS6wg==","shasum":"b09e90934ce4c0078588c9fe0f0113cac8929e59","tarball":"https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.0.0-insiders.c9d9da3.tgz","fileCount":12,"unpackedSize":50264,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDH+EttjCVOhFS21H6emZO2DEcJsyCtatK4OOFxvFxYuAiEAwFOHxE0ct+aqfdm5GVfnK8TNeMC9DmW7YeZQmklFDvQ="}]},"_npmUser":{"name":"adamwathan","email":"adam@adamwathan.me"},"directories":{},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/forms_0.0.0-insiders.c9d9da3_1711127840334_0.9541896997708761"},"_hasShrinkwrap":false}},"time":{"created":"2020-11-11T22:30:17.470Z","0.1.0":"2020-11-11T22:30:17.797Z","modified":"2024-03-22T17:17:20.963Z","0.1.1":"2020-11-12T03:16:33.391Z","0.1.2":"2020-11-12T03:59:42.817Z","0.1.3":"2020-11-12T14:02:07.200Z","0.1.4":"2020-11-12T17:21:11.337Z","0.2.0":"2020-11-16T19:36:53.075Z","0.2.1":"2020-11-17T13:50:43.276Z","0.2.0-8a8671b":"2021-02-26T15:08:52.460Z","0.3.0":"2021-03-26T02:15:29.671Z","0.3.1":"2021-03-26T10:33:44.458Z","0.3.2":"2021-03-26T10:38:56.702Z","0.3.3":"2021-06-03T16:51:51.387Z","0.3.4":"2021-09-28T18:42:58.500Z","0.4.0-alpha.1":"2021-10-01T16:14:12.718Z","0.0.0-insiders.491a834":"2021-10-05T07:05:34.254Z","0.0.0-insiders.2bd8f7e":"2021-10-27T14:55:05.047Z","0.4.0-alpha.2":"2021-11-08T17:20:49.220Z","0.4.0":"2021-12-09T16:37:06.484Z","0.0.0-insiders.e8e01c3":"2021-12-09T16:37:59.573Z","0.0.0-insiders.533f0ce":"2021-12-15T15:05:50.157Z","0.0.0-insiders.becd3b2":"2022-01-20T19:13:27.855Z","0.0.0-insiders.e17d25f":"2022-01-20T19:24:51.755Z","0.0.0-insiders.bb5315c":"2022-02-05T20:24:58.353Z","0.0.0-insiders.807cd40":"2022-02-23T15:11:42.896Z","0.0.0-insiders.d7b1a9a":"2022-02-23T15:12:12.893Z","0.0.0-insiders.0b1e872":"2022-02-25T14:22:24.027Z","0.0.0-insiders.1bd06b1":"2022-02-28T15:25:05.061Z","0.0.0-insiders.99fbd47":"2022-03-01T22:00:35.517Z","0.0.0-insiders.9a0c0e4":"2022-03-02T17:47:32.592Z","0.4.1":"2022-03-02T17:50:19.835Z","0.0.0-insiders.1871f90":"2022-03-02T19:24:09.304Z","0.0.0-insiders.3103e33":"2022-03-02T19:29:22.996Z","0.5.0":"2022-03-02T19:30:24.273Z","0.0.0-insiders.37912e9":"2022-04-17T12:51:00.378Z","0.0.0-insiders.01edbb6":"2022-05-02T15:01:50.699Z","0.0.0-insiders.203d454":"2022-05-02T15:06:48.149Z","0.0.0-insiders.7ef7a14":"2022-05-03T19:43:22.500Z","0.5.1":"2022-05-03T19:43:51.312Z","0.0.0-insiders.c763df9":"2022-05-18T13:33:59.171Z","0.0.0-insiders.471c040":"2022-05-18T13:36:32.552Z","0.5.2":"2022-05-18T13:43:39.573Z","0.0.0-insiders.19e4dda":"2022-05-18T13:43:47.088Z","0.0.0-insiders.ac7f9a7":"2022-09-02T11:42:33.751Z","0.0.0-insiders.c056ccf":"2022-09-02T11:44:43.127Z","0.0.0-insiders.b3ed157":"2022-09-02T11:44:59.245Z","0.5.3":"2022-09-02T11:45:39.924Z","0.0.0-insiders.615a228":"2023-01-03T11:53:04.279Z","0.0.0-insiders.73d5b01":"2023-05-12T16:04:55.597Z","0.0.0-insiders.c846b72":"2023-07-13T15:11:34.078Z","0.0.0-insiders.c2e2c07":"2023-07-13T16:33:06.979Z","0.5.4":"2023-07-13T16:33:31.697Z","0.0.0-insiders.e60d81a":"2023-07-13T16:33:38.288Z","0.0.0-insiders.5a13e94":"2023-08-22T20:27:51.127Z","0.0.0-insiders.31ba684":"2023-08-22T20:28:18.634Z","0.0.0-insiders.199b00d":"2023-08-22T20:31:01.419Z","0.0.0-insiders.9b7356c":"2023-08-22T20:31:29.539Z","0.5.5":"2023-08-22T20:32:44.120Z","0.0.0-insiders.350b931":"2023-08-25T13:59:42.044Z","0.0.0-insiders.d74d454":"2023-08-25T14:02:13.424Z","0.0.0-insiders.c1c4286":"2023-08-28T20:37:38.258Z","0.0.0-insiders.ad3f056":"2023-08-28T20:40:39.304Z","0.5.6":"2023-08-28T20:41:37.628Z","0.0.0-insiders.8d2b06f":"2023-11-10T19:26:31.185Z","0.0.0-insiders.e6bcd1f":"2023-11-10T19:28:33.501Z","0.5.7":"2023-11-10T19:42:19.349Z","0.0.0-insiders.c9d9da3":"2024-03-22T17:17:20.488Z"},"maintainers":[{"name":"thecrypticace","email":"thecrypticace@gmail.com"},{"name":"reinink","email":"jonathan@reinink.ca"},{"name":"adamwathan","email":"adam@adamwathan.me"},{"name":"malfaitrobin","email":"malfait.robin@gmail.com"}],"description":"A plugin that provides a basic reset for form styles that makes form elements easy to override with utilities.","homepage":"https://github.com/tailwindlabs/tailwindcss-forms#readme","repository":{"type":"git","url":"git+https://github.com/tailwindlabs/tailwindcss-forms.git"},"bugs":{"url":"https://github.com/tailwindlabs/tailwindcss-forms/issues"},"license":"MIT","readme":"","readmeFilename":""}