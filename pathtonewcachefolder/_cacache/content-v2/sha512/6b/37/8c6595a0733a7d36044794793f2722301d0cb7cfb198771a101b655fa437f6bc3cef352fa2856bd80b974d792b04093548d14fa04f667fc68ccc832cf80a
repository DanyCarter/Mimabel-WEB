{"_id":"tcp-port-used","_rev":"27-ea12ace8c6f5efea56c960611eb5c37a","name":"tcp-port-used","description":"A simple Node.js module to check if a TCP port is already bound.","dist-tags":{"latest":"1.0.2"},"versions":{"0.0.1":{"name":"tcp-port-used","version":"0.0.1","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"./node_modules/.bin/mocha --reporter list"},"repository":{"type":"git","url":"git://github.com/jut-io/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/jut-io/tcp-port-used/issues"},"homepage":"https://github.com/jut-io/tcp-port-used","dependencies":{"is2":"0.0.8","q":"0.9.7"},"devDependencies":{"mocha":"1.15.0"},"readme":"tcp-port-used\n=============\n\nA simple Node.js module to check if a TCP port is currently in use. It returns\na promise from the q library.\n\n## Installation\n\n    npm install tcp-port-used\n\n## Example\n\n    var tcpPortUsed = require('tcp-port-used');\n\n    tcpPortUsed.check(44201)\n    .then(function(inUse) {\n        console.log('Port 44201 usage: '+inUse);\n    }, function(err) {\n        console.error('Error on check: '+err.message);\n    });\n\n## API\n\n### check(port)\nChecks to see if the port in question is in use. Returns a deferred promise\nthat resolves to true if the socket is in use and false otherwise.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 jut-io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"tcp-port-used@0.0.1","dist":{"shasum":"14d27b3579d259f01cfb2a6aef5c64eff0c1ddea","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-0.0.1.tgz","integrity":"sha512-S7A8knjK4a6iIg8EhszF6OyabrJPn9RO9n6GPXsRp8EElujjy6JqD6zrRqdUCeji3Ijxq+5mJEZFW1XZk7rbjg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE426+qSd6c+wqhzFcSN5yu7ZIqcmZo1TFb79FTOL76mAiBPTYxIZFnI9sVHyFLcMAAixf0Ay0W31Dn5xdXfyjScPw=="}]},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{}},"0.0.2":{"name":"tcp-port-used","version":"0.0.2","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"./node_modules/.bin/mocha --reporter list"},"repository":{"type":"git","url":"git://github.com/jut-io/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/jut-io/tcp-port-used/issues"},"homepage":"https://github.com/jut-io/tcp-port-used","dependencies":{"is2":"0.0.9","q":"0.9.7"},"devDependencies":{"mocha":"1.15.0"},"readme":"tcp-port-used\n=============\n\nA simple Node.js module to check if a TCP port is currently in use. It returns\na promise from the q library.\n\nNote: You have to admin privs to successfully tests system ports (0-1023).\n\n## Installation\n\n    npm install tcp-port-used\n\n## Example\n\n    var tcpPortUsed = require('tcp-port-used');\n\n    tcpPortUsed.check(44201)\n    .then(function(inUse) {\n        console.log('Port 44201 usage: '+inUse);\n    }, function(err) {\n        console.error('Error on check: '+err.message);\n    });\n\n## API\n\n### check(port)\nChecks to see if the port in question is in use. Returns a deferred promise\nthat resolves to true if the socket is in use and false otherwise.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 jut-io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"tcp-port-used@0.0.2","dist":{"shasum":"011633cd7ad6af23ee2ce40eefb158d8328833ee","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-0.0.2.tgz","integrity":"sha512-35hX1eJU6Z+G+GB10EjOoLnHXhKy4IQdcdffFrYNAE5yt7yNOQSku60iVL9NeCSFWZ2WdLkpB8CU1leg06yd2w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDYAqhmzS1GuGZ2rGj5foGLjhBXPg75gFs7LKClC+HO8QIhAMou1Triu3fCY2wgbbkW4aeDNz19pnbVG568nuec2N02"}]},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{}},"0.0.3":{"name":"tcp-port-used","version":"0.0.3","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"./node_modules/.bin/mocha --reporter list"},"repository":{"type":"git","url":"git://github.com/jut-io/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/jut-io/tcp-port-used/issues"},"homepage":"https://github.com/jut-io/tcp-port-used","dependencies":{"debug":"0.7.4","is2":"0.0.9","q":"0.9.7"},"devDependencies":{"mocha":"1.15.0"},"readme":"tcp-port-used\n=============\n\nA simple Node.js module to check if a TCP localhost port is currently in use. It\nreturns a promise from the q library.\n\nNote: You have to admin privs to successfully test system ports (0-1023).\n\n## Installation\n\n    npm install tcp-port-used\n\n## Examples\nTo check a port's state:\n\n    var tcpPortUsed = require('tcp-port-used');\n\n    tcpPortUsed.check(44201)\n    .then(function(inUse) {\n        console.log('Port 44201 usage: '+inUse);\n    }, function(err) {\n        console.error('Error on check: '+err.message);\n    });\n\n    tcpPortUsed.waitUntilFree(44201, 500, 4000)\n    .then(function() {\n        console.log('Port 44201 is now available!');\n    }, function(err) {\n        console.error(err.message);\n    });\n\nTo wait until a port is available:\n\n    tcpPortUsed.waitUntilFree(44203, 500, 4000)\n    .then(function() {\n        console.log('Port 44203 is now free.');\n    }, function(err) {\n        console.loh('Error: ', error.message);\n    });\n\nTo wait until a port is accepting connections:\n\n    tcpPortUsed.waitUntilUsed(44204, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 is now in use.');\n    }, function(err) {\n        console.loh('Error: ', error.message);\n    });\n\n## API\n\n\n### check(port)\nChecks if a TCP port is in use by creating the socket and binding it to the\ntarget port. Once bound, successfully, it's assume the port is availble.\nAfter the socket is closed or in error, the promise is resolved.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Param:**\n\n**Number** *port* The port you are curious to see if available.\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n### waitUntilFree(port, [retryTimeMs], [timeOutMs])\nCreates a deferred promise and fulfills it only when the socket is free.\nWill retry on an interval specified in retryTimeMs.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Params:**\n\n* **Number** *port* a valid TCP port number\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n### waitUntilUsed(port, [retryTimeMs], [timeOutMs])\n\nCreates a deferred promise and fulfills it only when the socket is used.\nWill retry on an interval specified in retryTimeMs.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Params:**\n\n* **Number** *port* a valid TCP port number\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 500ms\n* **Number** *[timeOutMs]* the amount of time to wait until port is free\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 jut-io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","_id":"tcp-port-used@0.0.3","dist":{"shasum":"3966452a5b5e28826928963674c5dea6a6278d67","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-0.0.3.tgz","integrity":"sha512-YgIbRATK/wWxxKDVuCGMjVTotsUupovdqCWgG54RNXogK6ylDUoP522hqDwM2wd99QbnV/f3w6mZFW+k89kFSA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCeZK3dNbTrvyVFPXSdUNi2r37CBtdJ79/s8/6agfN/hgIgYINntDdX/FyhXHg6jaeh6a2u8G+Bo5IAgjoQQHbAt+M="}]},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{}},"0.0.5":{"name":"tcp-port-used","version":"0.0.5","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"./node_modules/.bin/mocha --reporter list"},"repository":{"type":"git","url":"git://github.com/jut-io/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/jut-io/tcp-port-used/issues"},"homepage":"https://github.com/jut-io/tcp-port-used","dependencies":{"debug":"0.7.4","is2":"0.0.9","q":"0.9.7"},"devDependencies":{"mocha":"1.15.0"},"readme":"tcp-port-used\n=============\n\nA simple Node.js module to check if a TCP localhost port is currently in use. It\nreturns a promise from the q library.\n\nNote: You must have admin privs to successfully test system ports (0-1023).\n\n## Installation\n\n    npm install tcp-port-used\n\n## Examples\nTo check a port's state:\n\n    var tcpPortUsed = require('tcp-port-used');\n\n    tcpPortUsed.check(44201)\n    .then(function(inUse) {\n        console.log('Port 44201 usage: '+inUse);\n    }, function(err) {\n        console.error('Error on check: '+err.message);\n    });\n\nTo wait until a port is available:\n\n    tcpPortUsed.waitUntilFree(44203, 500, 4000)\n    .then(function() {\n        console.log('Port 44203 is now free.');\n    }, function(err) {\n        console.loh('Error: ', error.message);\n    });\n\nTo wait until a port is accepting connections:\n\n    tcpPortUsed.waitUntilUsed(44204, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 is now in use.');\n    }, function(err) {\n        console.loh('Error: ', error.message);\n    });\n\n## API\n\n\n### check(port)\nChecks if a TCP port is in use by creating the socket and binding it to the\ntarget port. Once bound, successfully, it's assume the port is availble.\nAfter the socket is closed or in error, the promise is resolved.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Param:**\n\n**Number** *port* The port you are curious to see if available.\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n### waitUntilFree(port, [retryTimeMs], [timeOutMs])\nCreates a deferred promise and fulfills it only when the socket is free.\nWill retry on an interval specified in retryTimeMs.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Params:**\n\n* **Number** *port* a valid TCP port number\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n### waitUntilUsed(port, [retryTimeMs], [timeOutMs])\n\nCreates a deferred promise and fulfills it only when the socket is used.\nWill retry on an interval specified in retryTimeMs.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Params:**\n\n* **Number** *port* a valid TCP port number\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 500ms\n* **Number** *[timeOutMs]* the amount of time to wait until port is free\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 jut-io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","readmeFilename":"README.md","_id":"tcp-port-used@0.0.5","dist":{"shasum":"7e2f244a382b30722414110f42927e7ee49da764","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-0.0.5.tgz","integrity":"sha512-/NxcE13+d92PWRug9nkGmFVCeInECtVfQpxdhwNkcRFU5lDZy1ow8w8lnQl/MyQZsIZvfY4/DbsJYcyaDhyYsA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCdy6dT3PXQQujy+4blTHm1uRd4rCDvqtwAqvG/9sKa+wIhAN7orkTivepQnlYXbDxkD87NkrHqnaxFFcYPp7EBbu00"}]},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{}},"0.0.6":{"name":"tcp-port-used","version":"0.0.6","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"./node_modules/.bin/mocha --reporter list"},"repository":{"type":"git","url":"git://github.com/jut-io/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/jut-io/tcp-port-used/issues"},"homepage":"https://github.com/jut-io/tcp-port-used","dependencies":{"debug":"0.7.4","is2":"0.0.9","q":"0.9.7"},"devDependencies":{"mocha":"1.15.0"},"readme":"tcp-port-used\n=============\n\nA simple Node.js module to check if a TCP localhost port is currently in use. It\nreturns a promise from the q library.\n\nNote: You must have admin privs to successfully test system ports (0-1023).\n\n## Installation\n\n    npm install tcp-port-used\n\n## Examples\nTo check a port's state:\n\n    var tcpPortUsed = require('tcp-port-used');\n\n    tcpPortUsed.check(44201)\n    .then(function(inUse) {\n        console.log('Port 44201 usage: '+inUse);\n    }, function(err) {\n        console.error('Error on check: '+err.message);\n    });\n\nTo wait until a port is available:\n\n    tcpPortUsed.waitUntilFree(44203, 500, 4000)\n    .then(function() {\n        console.log('Port 44203 is now free.');\n    }, function(err) {\n        console.loh('Error: ', error.message);\n    });\n\nTo wait until a port is accepting connections:\n\n    tcpPortUsed.waitUntilUsed(44204, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 is now in use.');\n    }, function(err) {\n        console.loh('Error: ', error.message);\n    });\n\n## API\n\n\n### check(port)\nChecks if a TCP port is in use by creating the socket and binding it to the\ntarget port. Once bound, successfully, it's assume the port is availble.\nAfter the socket is closed or in error, the promise is resolved.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Param:**\n\n**Number** *port* The port you are curious to see if available.\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n### waitUntilFree(port, [retryTimeMs], [timeOutMs])\nCreates a deferred promise and fulfills it only when the socket is free.\nWill retry on an interval specified in retryTimeMs.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Params:**\n\n* **Number** *port* a valid TCP port number\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n### waitUntilUsed(port, [retryTimeMs], [timeOutMs])\n\nCreates a deferred promise and fulfills it only when the socket is used.\nWill retry on an interval specified in retryTimeMs.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Params:**\n\n* **Number** *port* a valid TCP port number\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 500ms\n* **Number** *[timeOutMs]* the amount of time to wait until port is free\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 jut-io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","readmeFilename":"README.md","_id":"tcp-port-used@0.0.6","dist":{"shasum":"76834caf1ff1fbdb4017170c9e6d369bb0bad49e","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-0.0.6.tgz","integrity":"sha512-RPLwMOfNz/9JyxpZvp32MBf/LVmFXKWlq5fr9Zkwxy/zXLcGvVA0evH8R5fhz85lkw8lshQPNhuHyfpaZVY5rg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEb2toxefiOP4c5OPnOGxp+2MRkffB9G/N0n+U7wAL/kAiEA73V2qHxrTM14Fp7zQ3yNBNYLJ8/6p/2HTaL0NDvl7qo="}]},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{}},"0.0.7":{"name":"tcp-port-used","version":"0.0.7","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"./node_modules/.bin/mocha --reporter list"},"repository":{"type":"git","url":"git://github.com/jut-io/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/jut-io/tcp-port-used/issues"},"homepage":"https://github.com/jut-io/tcp-port-used","dependencies":{"debug":"0.7.4","is2":"0.0.9","q":"0.9.7"},"devDependencies":{"mocha":"1.15.0"},"readme":"tcp-port-used\n=============\n\nA simple Node.js module to check if a TCP localhost port is currently in use. It\nreturns a promise from the q library.\n\nNote: You must have admin privs to successfully test system ports (0-1023).\n\n## Installation\n\n    npm install tcp-port-used\n\n## Examples\nTo check a port's state:\n\n    var tcpPortUsed = require('tcp-port-used');\n\n    tcpPortUsed.check(44201)\n    .then(function(inUse) {\n        console.log('Port 44201 usage: '+inUse);\n    }, function(err) {\n        console.error('Error on check: '+err.message);\n    });\n\nTo wait until a port is available:\n\n    tcpPortUsed.waitUntilFree(44203, 500, 4000)\n    .then(function() {\n        console.log('Port 44203 is now free.');\n    }, function(err) {\n        console.log('Error: ', error.message);\n    });\n\nTo wait until a port is accepting connections:\n\n    tcpPortUsed.waitUntilUsed(44204, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 is now in use.');\n    }, function(err) {\n        console.log('Error: ', error.message);\n    });\n\n## API\n\n\n### check(port)\nChecks if a TCP port is in use by creating the socket and binding it to the\ntarget port. Once bound, successfully, it's assume the port is availble.\nAfter the socket is closed or in error, the promise is resolved.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Param:**\n\n**Number** *port* The port you are curious to see if available.\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n### waitUntilFree(port, [retryTimeMs], [timeOutMs])\nCreates a deferred promise and fulfills it only when the socket is free.\nWill retry on an interval specified in retryTimeMs.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Params:**\n\n* **Number** *port* a valid TCP port number\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n### waitUntilUsed(port, [retryTimeMs], [timeOutMs])\n\nCreates a deferred promise and fulfills it only when the socket is used.\nWill retry on an interval specified in retryTimeMs.\nNote: you have to be super user to correctly test system ports (0-1023).\n\n**Params:**\n\n* **Number** *port* a valid TCP port number\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 500ms\n* **Number** *[timeOutMs]* the amount of time to wait until port is free\n\n**Returns:**\n\n**Object** A deferred Q promise.\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 jut-io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","readmeFilename":"README.md","_id":"tcp-port-used@0.0.7","dist":{"shasum":"5093d745edaecf183c14cf34bdb6798605e784a4","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-0.0.7.tgz","integrity":"sha512-h4NaP3sa/bK+G3OGKY8UCVdyGLsuPo2mPIODyShtMZt3Vi+slvF047PL+ccXSXJufCoKZv0/1vqmW+XH1/6i8A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCAdRy5hTF6jJ6oInoPsWmPALZDXpSjMHfKh7iWuZOQMgIgT/MuVSWvlPXtsy2uawjs+euc6YUOlDtfyg7nciHf1us="}]},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{}},"0.1.0":{"name":"tcp-port-used","version":"0.1.0","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"./node_modules/.bin/mocha --reporter=list ./test.js"},"repository":{"type":"git","url":"git://github.com/jut-io/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/jut-io/tcp-port-used/issues"},"homepage":"https://github.com/jut-io/tcp-port-used","dependencies":{"debug":"0.7.4","is2":"0.0.9","q":"0.9.7"},"devDependencies":{"mocha":"1.15.0"},"readme":"tcp-port-used\n=============\n\nA simple Node.js module to check if a TCP port is currently in use. It returns a\ndeferred promise from the q library. Remember, you must have admin privelidges\nto successfully test the system ports in the range of 0 to 1023.\n\n## Installation\n\n    npm install tcp-port-used\n\n## Examples\nTo check a port's state:\n\n    var tcpPortUsed = require('tcp-port-used');\n\n    tcpPortUsed.check(44201, '127.0.0.1')\n    .then(function(inUse) {\n        console.log('Port 44201 usage: '+inUse);\n    }, function(err) {\n        console.error('Error on check:', err.message);\n    });\n\nTo wait until a port on localhost is available:\n\n    tcpPortUsed.waitUntilFree(44203, 500, 4000)\n    .then(function() {\n        console.log('Port 44203 is now free.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is available:\n\n    tcpPortUsed.waitUntilFreeOnHost(44203, 'some.host.com', 500, 4000)\n    .then(function() {\n        console.log('Port 44203 on some.host.com is now free.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on localhost is accepting connections:\n\n    tcpPortUsed.waitUntilUsed(44204, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is accepting connections:\n\n    tcpPortUsed.waitUntilUsedOnHost(44204, 'some.host.com', 500, 4000)\n    .then(function() {\n        console.log('Port 44204 on some.host.com is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is in specific state:\n\n    var inUse = true;   // wait until the port is in use\n    tcpPortUsed.waitForStatus(44204, 'some.host.com', inUse, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 on some.host.com is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\n\n## API\n\n\n### check(port [, host])\nChecks if a TCP port is in use by attempting to connect to the port on host.\nIf no host is specified, the module uses '127.0.0.1' (localhost). When the\npromise is resolved, there is a parameter `inUse`, when true means the port is\nin use and false means the port is free.\n\n**Parameters:**\n\n* **Number|Object** *port* The port you are curious to see if available. If an\n  object, must contain all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilFree(port [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the localhost socket is\nfree.  Will retry on an interval specified in retryTimeMs until the timeout. If\nnot defined the retryTime is 200 ms and the timeout is 2000 ms.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object must contain\n  all the parameters as properties.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n\n### waitUntilFreeOnHost(port [, host] [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the localhost socket is\nfree.  Will retry on an interval specified in retryTimeMs until the timeout. If\nnot defined the retryTime is 200 ms and the timeout is 2000 ms. If the host is\nnot defined, the modules uses the default '127.0.0.1'.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilUsed(port [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the socket is accepting\nconnections. Will retry on an interval specified in retryTimeMs until the\ntimeout. If the host is not defined the retryTime is 200 ms and the timeout is\n2000 ms.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilUsedOnHost(port [, host] [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the socket is accepting\nconnections. Will retry on an interval specified in retryTimeMs until the\ntimeout. If not defined the retryTime is 200 ms and the timeout is 2000 ms.\nIf the host is not defined the module uses the default '127.0.0.1'.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitForStatus(port, host, status [, retryTimeMs] [, timeOutMs])\nWaits until the port on host matches the boolean status in terms of use. If the\nstatus is true, the promise defers until the port is in use. If the status is\nfalse the promise defers until the port is free. If the host is undefined or\nnull, the module uses the default '127.0.0.1'. Also, if not defined the\nretryTime is 200 ms and the timeout is 2000 ms.\n\n**Parameters:**\n\n* **Number** *port* a valid TCP port number. If an object, must contain all the\n  parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Boolean** *status* A boolean describing the condition to wait for in terms of \"in use.\" True indicates wait until the port is in use. False indicates wait until the port is free.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 jut-io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","readmeFilename":"README.md","_id":"tcp-port-used@0.1.0","dist":{"shasum":"28657905e1a91b1aea58029266020ecfc8f6039f","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-0.1.0.tgz","integrity":"sha512-CVuCkotLI2OSFcdS+W3xkcAcmdNbIEF30zJ3zZ7FA265odolDk37OhJRYU/1J6RszcHrCrBnmpiYssaZ3EzFiA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDWI967DtUTtF0sGUnDLnFweQhzxLfARnhe3DfFqtlaTQIgTMo/Lt+Lxg+IycKTk5xNiFWr8nGCHqHQ7R6N1jhgf/g="}]},"_from":".","_npmVersion":"1.3.17","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{}},"0.1.1":{"name":"tcp-port-used","version":"0.1.1","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"./node_modules/.bin/mocha --reporter=list ./test.js"},"repository":{"type":"git","url":"git://github.com/jut-io/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/jut-io/tcp-port-used/issues"},"homepage":"https://github.com/jut-io/tcp-port-used","dependencies":{"debug":"0.7.4","is2":"0.0.9","q":"0.9.7"},"devDependencies":{"mocha":"1.15.0"},"readme":"tcp-port-used\n=============\n\nA simple Node.js module to check if a TCP port is currently in use. It returns a\ndeferred promise from the q library. Remember, you must have admin privelidges\nto successfully test the system ports in the range of 0 to 1023.\n\n## Installation\n\n    npm install tcp-port-used\n\n## Examples\nTo check a port's state:\n\n    var tcpPortUsed = require('tcp-port-used');\n\n    tcpPortUsed.check(44201, '127.0.0.1')\n    .then(function(inUse) {\n        console.log('Port 44201 usage: '+inUse);\n    }, function(err) {\n        console.error('Error on check:', err.message);\n    });\n\nTo wait until a port on localhost is available:\n\n    tcpPortUsed.waitUntilFree(44203, 500, 4000)\n    .then(function() {\n        console.log('Port 44203 is now free.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is available:\n\n    tcpPortUsed.waitUntilFreeOnHost(44203, 'some.host.com', 500, 4000)\n    .then(function() {\n        console.log('Port 44203 on some.host.com is now free.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on localhost is accepting connections:\n\n    tcpPortUsed.waitUntilUsed(44204, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is accepting connections:\n\n    tcpPortUsed.waitUntilUsedOnHost(44204, 'some.host.com', 500, 4000)\n    .then(function() {\n        console.log('Port 44204 on some.host.com is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is in specific state:\n\n    var inUse = true;   // wait until the port is in use\n    tcpPortUsed.waitForStatus(44204, 'some.host.com', inUse, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 on some.host.com is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\n\n## API\n\n\n### check(port [, host])\nChecks if a TCP port is in use by attempting to connect to the port on host.\nIf no host is specified, the module uses '127.0.0.1' (localhost). When the\npromise is resolved, there is a parameter `inUse`, when true means the port is\nin use and false means the port is free.\n\n**Parameters:**\n\n* **Number|Object** *port* The port you are curious to see if available. If an\n  object, must contain all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilFree(port [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the localhost socket is\nfree.  Will retry on an interval specified in retryTimeMs until the timeout. If\nnot defined the retryTime is 200 ms and the timeout is 2000 ms.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object must contain\n  all the parameters as properties.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n\n### waitUntilFreeOnHost(port [, host] [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the localhost socket is\nfree.  Will retry on an interval specified in retryTimeMs until the timeout. If\nnot defined the retryTime is 200 ms and the timeout is 2000 ms. If the host is\nnot defined, the modules uses the default '127.0.0.1'.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilUsed(port [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the socket is accepting\nconnections. Will retry on an interval specified in retryTimeMs until the\ntimeout. If the host is not defined the retryTime is 200 ms and the timeout is\n2000 ms.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilUsedOnHost(port [, host] [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the socket is accepting\nconnections. Will retry on an interval specified in retryTimeMs until the\ntimeout. If not defined the retryTime is 200 ms and the timeout is 2000 ms.\nIf the host is not defined the module uses the default '127.0.0.1'.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitForStatus(port, host, status [, retryTimeMs] [, timeOutMs])\nWaits until the port on host matches the boolean status in terms of use. If the\nstatus is true, the promise defers until the port is in use. If the status is\nfalse the promise defers until the port is free. If the host is undefined or\nnull, the module uses the default '127.0.0.1'. Also, if not defined the\nretryTime is 200 ms and the timeout is 2000 ms.\n\n**Parameters:**\n\n* **Number** *port* a valid TCP port number. If an object, must contain all the\n  parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Boolean** *status* A boolean describing the condition to wait for in terms of \"in use.\" True indicates wait until the port is in use. False indicates wait until the port is free.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 jut-io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","readmeFilename":"README.md","_id":"tcp-port-used@0.1.1","dist":{"shasum":"d92dd5511b806575758e96144003b59a0a19762e","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-0.1.1.tgz","integrity":"sha512-e/r/LEEKxYyiAyzrM75NsHgfNVYc+M1k3l+NxkBFM0OYXJNLu00cjU2xkR6awdJnYKn4YKYDEEALOV1zUPf9NA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCEUAqOdVL3bkyzLB8bfQQewV6e1S1E9DxrPv1PYMADdAIgQjRkWwUDykI+uJqeGKMYFQN30wdBW5+Ijqf5QnyvmLQ="}]},"_from":".","_npmVersion":"1.3.17","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{}},"0.1.2":{"name":"tcp-port-used","version":"0.1.2","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"./node_modules/.bin/mocha --reporter=list ./test.js"},"repository":{"type":"git","url":"git://github.com/jut-io/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/jut-io/tcp-port-used/issues"},"homepage":"https://github.com/jut-io/tcp-port-used","dependencies":{"debug":"0.7.4","is2":"0.0.9","q":"0.9.7"},"devDependencies":{"mocha":"1.15.0"},"readme":"tcp-port-used\n=============\n\nA simple Node.js module to check if a TCP port is currently in use. It returns a\ndeferred promise from the q library.\n\n## Installation\n\n    npm install tcp-port-used\n\n## Examples\nTo check a port's state:\n\n    var tcpPortUsed = require('tcp-port-used');\n\n    tcpPortUsed.check(44201, '127.0.0.1')\n    .then(function(inUse) {\n        console.log('Port 44201 usage: '+inUse);\n    }, function(err) {\n        console.error('Error on check:', err.message);\n    });\n\nTo wait until a port on localhost is available:\n\n    tcpPortUsed.waitUntilFree(44203, 500, 4000)\n    .then(function() {\n        console.log('Port 44203 is now free.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is available:\n\n    tcpPortUsed.waitUntilFreeOnHost(44203, 'some.host.com', 500, 4000)\n    .then(function() {\n        console.log('Port 44203 on some.host.com is now free.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on localhost is accepting connections:\n\n    tcpPortUsed.waitUntilUsed(44204, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is accepting connections:\n\n    tcpPortUsed.waitUntilUsedOnHost(44204, 'some.host.com', 500, 4000)\n    .then(function() {\n        console.log('Port 44204 on some.host.com is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is in specific state:\n\n    var inUse = true;   // wait until the port is in use\n    tcpPortUsed.waitForStatus(44204, 'some.host.com', inUse, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 on some.host.com is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\n\n## API\n\n### check(port [, host])\nChecks if a TCP port is in use by attempting to connect to the port on host.\nIf no host is specified, the module uses '127.0.0.1' (localhost). When the\npromise is resolved, there is a parameter `inUse`, when true means the port is\nin use and false means the port is free.\n\n**Parameters:**\n\n* **Number|Object** *port* The port you are curious to see if available. If an\n  object, must contain all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilFree(port [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the localhost socket is\nfree.  Will retry on an interval specified in retryTimeMs until the timeout. If\nnot defined the retryTime is 200 ms and the timeout is 2000 ms.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object must contain\n  all the parameters as properties.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n\n### waitUntilFreeOnHost(port [, host] [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the localhost socket is\nfree.  Will retry on an interval specified in retryTimeMs until the timeout. If\nnot defined the retryTime is 200 ms and the timeout is 2000 ms. If the host is\nnot defined, the modules uses the default '127.0.0.1'.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilUsed(port [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the socket is accepting\nconnections. Will retry on an interval specified in retryTimeMs until the\ntimeout. If the host is not defined the retryTime is 200 ms and the timeout is\n2000 ms.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilUsedOnHost(port [, host] [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the socket is accepting\nconnections. Will retry on an interval specified in retryTimeMs until the\ntimeout. If not defined the retryTime is 200 ms and the timeout is 2000 ms.\nIf the host is not defined the module uses the default '127.0.0.1'.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitForStatus(port, host, status [, retryTimeMs] [, timeOutMs])\nWaits until the port on host matches the boolean status in terms of use. If the\nstatus is true, the promise defers until the port is in use. If the status is\nfalse the promise defers until the port is free. If the host is undefined or\nnull, the module uses the default '127.0.0.1'. Also, if not defined the\nretryTime is 200 ms and the timeout is 2000 ms.\n\n**Parameters:**\n\n* **Number** *port* a valid TCP port number. If an object, must contain all the\n  parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Boolean** *status* A boolean describing the condition to wait for in terms of \"in use.\" True indicates wait until the port is in use. False indicates wait until the port is free.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 jut-io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","readmeFilename":"README.md","_id":"tcp-port-used@0.1.2","dist":{"shasum":"9450e8768c83b416fd4d1a6a9449eeccbf496c29","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-0.1.2.tgz","integrity":"sha512-jZI6bc4i0bRpxHprkCzqsi8r8jvaWXghDvFEdjH1yGNfSe3KH1l8TlM+TyEmB42p1XUCrOCbHh/55C6Hszqj6A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCwG5qIjuv5sIh1eABzWDhxrQ4Z+FtNOVv1QrtH8PBc6wIgLSw9r1xv988k4zIDE5YQm3jciHG0HhVH2VJeYlTJGFE="}]},"_from":".","_npmVersion":"1.3.17","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{}},"1.0.0":{"name":"tcp-port-used","version":"1.0.0","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"mocha --reporter=list ./test.js"},"repository":{"type":"git","url":"git://github.com/stdarg/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/stdargtcp-port-used/issues"},"homepage":"https://github.com/stdarg/tcp-port-used","dependencies":{"debug":"3.1.0","is2":"2.0.1"},"devDependencies":{"mocha":"5.2.0"},"gitHead":"e9d3d07c50a56afc49c09c411a501c404f0fba7d","_id":"tcp-port-used@1.0.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"dist":{"integrity":"sha512-urotaMxVc37q9avahpxjSp47ZfN5MvyxXTvbGOiERaSjQ/kQCNTSMKcTyntKowzX27ZgB+jE0qRIDQv/ILiIwg==","shasum":"ae84547cfa6a947704e4fb4838d37f46e50d6de8","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-1.0.0.tgz","fileCount":6,"unpackedSize":44346,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbe1U5CRA9TVsSAnZWagAAy6IQAJShqF4Mt3Ssf2Tc64XO\nlIXY834AZXn6AnBnnR7iPkWu3g0uSdFY/M9gPLL1AeQVipeBFVwXIxkO6J4l\nnhgm0n97fB+ZtiWtwKVS5lPtUNn81FQCunLlhXh4csOPRsQO1aw5os8+n1Bu\ne5k2SQA1LoGPd4kOo4V5OvVb5Tzvkf9zBEEStE2zrSr1I1vyKwfA1WobHTN+\n9y6+24llINU3Y0kwZTDuKWbbIddel3OP9tz5+LFtgT6olNpXESrZIy88bh1e\nYxIz0mU0fUMFR473VUuQ1A+rY7aZsf1jnd069Z1M6x4Ax+4sfcuGsceoR5GE\nWB7/rqmJT+69z4o3o2dstaKhj5VtrHLacyP3OAkY741zlBuxAeM3JwpNr/6l\nD6OV3CGdK0zFTdT+RtHlzIDCKrRew7n+gxwKYOVxMPPzU26R3ckCxI4dmIC1\n3wbLvDo3pxKS3WbZqGi9UdaWmOPMTPyjJcadgsh0npnHenQ1i94+LIqUxoZV\nGDWA4YzjUmKFXAyj4gHgEoK8ssdMsgO5kzr7IrHMdhz+J0DnAQkbRJI6EACi\nlNHnBFTZpwaISjo7ZXccOB39YQY+flKOcIgbBj2Xwg93r2IucRy5lrUYv7iv\nPEIpF923QCidFc6/v3pTcog8/q6rs03+SKmwQ344v3xJut0rq/Kj/1PnLH6T\n7ryn\r\n=XaQ7\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDTZCQsGflqwljIz4I1GwEu4r5nh63h6T2EV8DLAoPPbwIhAN5UyO6ooPDUAAe9fE4Gc9VDpA2BWd/ZNxKCnl7eHPSU"}]},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tcp-port-used_1.0.0_1534809400647_0.19803380977413543"},"_hasShrinkwrap":false},"1.0.1":{"name":"tcp-port-used","version":"1.0.1","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"mocha --reporter=list ./test.js"},"repository":{"type":"git","url":"git://github.com/stdarg/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/stdargtcp-port-used/issues"},"homepage":"https://github.com/stdarg/tcp-port-used","dependencies":{"debug":"4.1.0","is2":"2.0.1"},"devDependencies":{"mocha":"^5.2.0"},"gitHead":"23356dede7d2bb198cc07f47215d763c225a96c8","_id":"tcp-port-used@1.0.1","_npmVersion":"6.4.1","_nodeVersion":"10.11.0","_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"dist":{"integrity":"sha512-rwi5xJeU6utXoEIiMvVBMc9eJ2/ofzB+7nLOdnZuFTmNCLqRiQh2sMG9MqCxHU/69VC/Fwp5dV9306Qd54ll1Q==","shasum":"46061078e2d38c73979a2c2c12b5a674e6689d70","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-1.0.1.tgz","fileCount":6,"unpackedSize":44362,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb0lcaCRA9TVsSAnZWagAAEh8P/17QCapUlBO5BH5HnSMR\nMiDB9etjOsCTHzDpkXXFk3XwmNxoysByR0CdjWWu/QyohqxK0mWUjTN7HPdi\n45v8MnFRDb2pdPKpXHFdaD2COXMiqOhr9QJ5JPRGxln5RAKAKdjIu8s5jGht\neZSmfzfygN5oeXmFe0t11R6PR1qpU1ENNtsIEEKluWhLwZRdHRwrLm2t8lJd\nfPqxqaLncU9bU/9WZZDyez4CTh0R2oHai38YwcFqw3gPeMzPTdj3PKmbqsrm\n/e/BzcVhNHetnb06l4yCTlR1gEuGVv8KEZGgK4rBHikG4bLz6GzrXDdrcSke\nCuMqajoUXgZ6Rtb+V40zbiudy4e5AiFC9BAFwzmdoXrrUXFmGwLktXfQFLpF\nBSKahwA3RT8KQArMvY4C3DQyOXqgb0BfpAod93TkyaFx01EaVCEYTGTUYAVK\n2w4tX7r3CDLgYT/IZpUMTaJP39FP5vXdoIuzvgiNv2Xp8Nk/K18Bemp59lPi\nPZfI5FC5i39RmvSxd9gIa7cMJo33fL/1pmxqbQSTYPufulsVpvP1o6ADqlEk\nch0geRm+q7+AKNpER7L2ETKZ0ECTYLYrt0QQ6NcWwoe3GwrvFTorlIpoNFpp\nEWNnfnfEwGVXcv1MCP/BRtJ8/gJ7DTSQw2SMK6Epu7lrzZUnfsxlfSDLNAOF\n3ccH\r\n=RY6h\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC0zN+sYFN8UZcjEgsdbh8tafWKlOfbLfdz6MJAx0lC4QIhAKHYOYvb/jpHhisz3xGrWGlxoPGg8/ZrXHsl/xEMQIFd"}]},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tcp-port-used_1.0.1_1540511513945_0.04483857774079203"},"_hasShrinkwrap":false},"1.0.2":{"name":"tcp-port-used","version":"1.0.2","description":"A simple Node.js module to check if a TCP port is already bound.","main":"index.js","scripts":{"test":"mocha --reporter=list ./test.js"},"repository":{"type":"git","url":"git://github.com/stdarg/tcp-port-used.git"},"keywords":["tcp","port","available","free","check","networking"],"author":{"name":"Edmond Meinfelder"},"license":"MIT","bugs":{"url":"https://github.com/stdargtcp-port-used/issues"},"homepage":"https://github.com/stdarg/tcp-port-used","dependencies":{"debug":"4.3.1","is2":"^2.0.6"},"devDependencies":{"mocha":"^8.2.1"},"gitHead":"f12c7a39a3ad1ef398f03bebfe590a5fdd2c5d23","_id":"tcp-port-used@1.0.2","_nodeVersion":"10.15.1","_npmVersion":"6.9.0","dist":{"integrity":"sha512-l7ar8lLUD3XS1V2lfoJlCBaeoaWo/2xfYt81hM7VlvR4RrMVFqfmzfhLVk40hAb368uitje5gPtBRL1m/DGvLA==","shasum":"9652b7436eb1f4cfae111c79b558a25769f6faea","tarball":"https://registry.npmjs.org/tcp-port-used/-/tcp-port-used-1.0.2.tgz","fileCount":6,"unpackedSize":44363,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf2OwPCRA9TVsSAnZWagAAagsP/3Aguxz9JqQbTwbcrLas\nG9hBU/OjgKfeUquTbmmPzNahJtK0daP2/KnzP4Szld9LtzceLJvhay2rRiRh\nq3veDJ+J0c2WDbaMGrftvD/yD/WkgOgP59rICPs6A3zNpVrV5GbNxGlFkMeL\ndhPghPDKn/Vb0T/8A6EvUHqlYsPg+WAC8/bWkLdaRve1PPg+AUK5w+5pNki7\nD+87J+2ncgI08Pf5x9dKsCArSYM3lsSATAW+2Aqs88ERIUmHhTbdD4BfBgdk\nLi4bqmMm1zNxO05yKf9o/9w1pacXiBAeuY9TWh9wUTqkPqnchy0HRz1bVpd/\n7oyU0OtSmhLzsLK04VzT3dy2Vt52KlqMcGc/NqxO3ie3mADzEfzrS1dPPHct\n9O6P/Y/v+ghVpCvF0DUi6OSCKNLCEpzap9uk5X6030Ni0lySwlsfpsyqyyzs\n2w0Sm4MQ7ziTUjXlEDj+1AzIjIPfAVJiJkYio/tzQqwr7Pd9t3/pP5gM+H72\nibyr8cZrMyIU6zUol5+YuhMjOV1kkaFIOWKLEN82fAoIOd2YkJgPaNtOptod\n0rkX9EUBd7ejfHcJLpn/EMDblC61da3pDTqeveBqnlt1DpodcPorWGdZeuie\nizC+S71DXkwSww5sa+GjbNDf0+gM3KAk6mjv6AFx4hsKCx60wjPDYo8l+NTW\nkbdi\r\n=x8Vu\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHHjz96QMDq621UxlcqK992dh9532evmaWTKCL35aAo9AiEAkCK4shn52RO8wZgLdkv6iaEqtxjZSK9AvW8u3xDA6Do="}]},"_npmUser":{"name":"stdarg","email":"edmond@stdarg.com"},"directories":{},"maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tcp-port-used_1.0.2_1608051727512_0.05008819440950618"},"_hasShrinkwrap":false}},"readme":"tcp-port-used\n=============\n\nA simple Node.js module to check if a TCP port is currently in use. It returns a\ndeferred promise from the q library.\n\n## Installation\n\n    npm install tcp-port-used\n\n## Examples\nTo check a port's state:\n\n    var tcpPortUsed = require('tcp-port-used');\n\n    tcpPortUsed.check(44201, '127.0.0.1')\n    .then(function(inUse) {\n        console.log('Port 44201 usage: '+inUse);\n    }, function(err) {\n        console.error('Error on check:', err.message);\n    });\n\nTo wait until a port on localhost is available:\n\n    tcpPortUsed.waitUntilFree(44203, 500, 4000)\n    .then(function() {\n        console.log('Port 44203 is now free.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is available:\n\n    tcpPortUsed.waitUntilFreeOnHost(44203, 'some.host.com', 500, 4000)\n    .then(function() {\n        console.log('Port 44203 on some.host.com is now free.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on localhost is accepting connections:\n\n    tcpPortUsed.waitUntilUsed(44204, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is accepting connections:\n\n    tcpPortUsed.waitUntilUsedOnHost(44204, 'some.host.com', 500, 4000)\n    .then(function() {\n        console.log('Port 44204 on some.host.com is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\nTo wait until a port on a host is in specific state:\n\n    var inUse = true;   // wait until the port is in use\n    tcpPortUsed.waitForStatus(44204, 'some.host.com', inUse, 500, 4000)\n    .then(function() {\n        console.log('Port 44204 on some.host.com is now in use.');\n    }, function(err) {\n        console.log('Error:', err.message);\n    });\n\n\n## API\n\n### check(port [, host])\nChecks if a TCP port is in use by attempting to connect to the port on host.\nIf no host is specified, the module uses '127.0.0.1' (localhost). When the\npromise is resolved, there is a parameter `inUse`, when true means the port is\nin use and false means the port is free.\n\n**Parameters:**\n\n* **Number|Object** *port* The port you are curious to see if available. If an\n  object, must contain all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilFree(port [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the localhost socket is\nfree.  Will retry on an interval specified in retryTimeMs until the timeout. If\nnot defined the retryTime is 200 ms and the timeout is 2000 ms.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object must contain\n  all the parameters as properties.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n\n### waitUntilFreeOnHost(port [, host] [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the localhost socket is\nfree.  Will retry on an interval specified in retryTimeMs until the timeout. If\nnot defined the retryTime is 200 ms and the timeout is 2000 ms. If the host is\nnot defined, the modules uses the default '127.0.0.1'.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilUsed(port [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the socket is accepting\nconnections. Will retry on an interval specified in retryTimeMs until the\ntimeout. If the host is not defined the retryTime is 200 ms and the timeout is\n2000 ms.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitUntilUsedOnHost(port [, host] [, retryTimeMs] [, timeOutMs])\nReturns a deferred promise and fulfills it only when the socket is accepting\nconnections. Will retry on an interval specified in retryTimeMs until the\ntimeout. If not defined the retryTime is 200 ms and the timeout is 2000 ms.\nIf the host is not defined the module uses the default '127.0.0.1'.\n\n**Parameters:**\n\n* **Number|Object** *port* a valid TCP port number. If an object, must contain\n  all the parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n### waitForStatus(port, host, status [, retryTimeMs] [, timeOutMs])\nWaits until the port on host matches the boolean status in terms of use. If the\nstatus is true, the promise defers until the port is in use. If the status is\nfalse the promise defers until the port is free. If the host is undefined or\nnull, the module uses the default '127.0.0.1'. Also, if not defined the\nretryTime is 200 ms and the timeout is 2000 ms.\n\n**Parameters:**\n\n* **Number** *port* a valid TCP port number. If an object, must contain all the\n  parameters as properties.\n* **String** *host* The host name or IP address of the host. Default, if not defined: '127.0.0.1'\n* **Boolean** *status* A boolean describing the condition to wait for in terms of \"in use.\" True indicates wait until the port is in use. False indicates wait until the port is free.\n* **Number** *[retryTimeMs]* the retry interval in milliseconds - defaultis is 100ms.\n* **Number** *[timeOutMs]* the amount of time to wait until port is free. Default 300ms.\n\n**Returns:**\n\n**Object** A deferred promise from the q module.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 jut-io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","maintainers":[{"name":"stdarg","email":"edmond@stdarg.com"}],"time":{"modified":"2022-06-27T04:15:51.355Z","created":"2013-12-02T22:30:50.026Z","0.0.1":"2013-12-02T22:30:51.542Z","0.0.2":"2013-12-03T18:20:05.624Z","0.0.3":"2013-12-07T22:14:56.652Z","0.0.5":"2013-12-08T05:01:26.879Z","0.0.6":"2013-12-09T04:12:40.166Z","0.0.7":"2013-12-09T04:20:37.311Z","0.1.0":"2013-12-16T23:39:09.382Z","0.1.1":"2013-12-17T01:07:55.464Z","0.1.2":"2013-12-18T19:03:39.022Z","1.0.0":"2018-08-20T23:56:40.741Z","1.0.1":"2018-10-25T23:51:54.083Z","1.0.2":"2020-12-15T17:02:07.667Z"},"author":{"name":"Edmond Meinfelder"},"repository":{"type":"git","url":"git://github.com/stdarg/tcp-port-used.git"},"users":{"manikantag":true,"fengmiaosen":true},"homepage":"https://github.com/stdarg/tcp-port-used","keywords":["tcp","port","available","free","check","networking"],"bugs":{"url":"https://github.com/stdargtcp-port-used/issues"},"license":"MIT","readmeFilename":"README.md"}